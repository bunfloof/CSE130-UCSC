1
00:00:00,000 --> 00:00:02,399
the discussion so for example what do

2
00:00:02,399 --> 00:00:06,020
what do I mean by reasonable questions

3
00:00:06,540 --> 00:00:10,320
it's not okay to ask like okay or what

4
00:00:10,320 --> 00:00:12,599
is the operating systems what is the two

5
00:00:12,599 --> 00:00:14,519
rules of operating systems because

6
00:00:14,519 --> 00:00:16,800
because what we can easily find out that

7
00:00:16,800 --> 00:00:19,080
right we can easily find out in the

8
00:00:19,080 --> 00:00:22,380
textbook or just Google it so you can

9
00:00:22,380 --> 00:00:24,480
ask some questions for example

10
00:00:24,480 --> 00:00:25,260
um

11
00:00:25,260 --> 00:00:27,720
just an example okay like for many

12
00:00:27,720 --> 00:00:30,480
systems like throughputs you can say

13
00:00:30,480 --> 00:00:32,940
like throughput is

14
00:00:32,940 --> 00:00:35,040
is our performance very important

15
00:00:35,040 --> 00:00:37,160
performance by matrix

16
00:00:37,160 --> 00:00:40,700
but I also think like the fair list is

17
00:00:40,700 --> 00:00:42,960
also a very important performance

18
00:00:42,960 --> 00:00:46,500
metrics for example World War one and so

19
00:00:46,500 --> 00:00:48,180
my question is that

20
00:00:48,180 --> 00:00:50,460
like is there any relationship between

21
00:00:50,460 --> 00:00:53,219
the between the uh the trade-off between

22
00:00:53,219 --> 00:00:55,320
the uh throughputs and fairies something

23
00:00:55,320 --> 00:00:56,940
like that and also like scheduling

24
00:00:56,940 --> 00:00:58,860
algorithms you can say like

25
00:00:58,860 --> 00:00:59,820
um

26
00:00:59,820 --> 00:01:03,359
we know that lru list recently used

27
00:01:03,359 --> 00:01:05,880
algorithm for paging right pagans

28
00:01:05,880 --> 00:01:08,939
Gathering paging replacement algorithms

29
00:01:08,939 --> 00:01:10,860
right we were going to learn that like

30
00:01:10,860 --> 00:01:12,600
if you can ask a question like that like

31
00:01:12,600 --> 00:01:15,780
the lru algorithms like it seems like

32
00:01:15,780 --> 00:01:18,979
these algorithms need has incurred some

33
00:01:18,979 --> 00:01:21,960
actual memory overhead is there any way

34
00:01:21,960 --> 00:01:24,000
to reduce this overhead I have found

35
00:01:24,000 --> 00:01:26,240
some several papers mentioned about that

36
00:01:26,240 --> 00:01:29,340
and any other Solutions something like

37
00:01:29,340 --> 00:01:31,560
that you can raise questions you can

38
00:01:31,560 --> 00:01:33,299
also answer questions

39
00:01:33,299 --> 00:01:36,540
I'm going to have an actual grader to

40
00:01:36,540 --> 00:01:39,840
grade that she's going or she what he is

41
00:01:39,840 --> 00:01:40,920
going to

42
00:01:40,920 --> 00:01:43,680
look at everyone's discussion so because

43
00:01:43,680 --> 00:01:46,619
I didn't find too many students raise

44
00:01:46,619 --> 00:01:48,600
questions in The Piazza let's use that

45
00:01:48,600 --> 00:01:51,200
okay

46
00:01:51,360 --> 00:01:54,000
so another way is that if you choose not

47
00:01:54,000 --> 00:01:57,000
to if you choose not to

48
00:01:57,000 --> 00:01:59,640
discuss discussions in The Piazza you

49
00:01:59,640 --> 00:02:01,740
can also raise your hands and

50
00:02:01,740 --> 00:02:03,299
participating in the classroom

51
00:02:03,299 --> 00:02:06,479
discussion for example every class I'm

52
00:02:06,479 --> 00:02:08,038
going to

53
00:02:08,038 --> 00:02:10,979
um like ask you guys questions right so

54
00:02:10,979 --> 00:02:12,900
you can raise your hands and answer this

55
00:02:12,900 --> 00:02:15,840
question and uh yeah if I remember you

56
00:02:15,840 --> 00:02:18,959
like normally I if if you raise too many

57
00:02:18,959 --> 00:02:20,580
questions I'm going to remember remember

58
00:02:20,580 --> 00:02:23,099
you I'm I was going to automatically add

59
00:02:23,099 --> 00:02:25,440
your points into that okay

60
00:02:25,440 --> 00:02:28,260
so either way it works

61
00:02:28,260 --> 00:02:30,180
okay

62
00:02:30,180 --> 00:02:32,640
uh

63
00:02:32,640 --> 00:02:35,520
so we are going to have a quick review

64
00:02:35,520 --> 00:02:38,280
about about what we have learned so far

65
00:02:38,280 --> 00:02:43,580
in the process and stress okay uh

66
00:02:45,360 --> 00:02:47,819
let me close that so

67
00:02:47,819 --> 00:02:50,220
okay so first so what is process what is

68
00:02:50,220 --> 00:02:52,580
process

69
00:02:55,980 --> 00:02:57,540
so you're going to

70
00:02:57,540 --> 00:02:59,280
Implement your data structure about

71
00:02:59,280 --> 00:03:00,720
process

72
00:03:00,720 --> 00:03:02,940
what you are going to put into that to

73
00:03:02,940 --> 00:03:05,959
represent the process

74
00:03:07,620 --> 00:03:11,879
we learned that in our last week

75
00:03:11,879 --> 00:03:15,140
I think Tuesday is class

76
00:03:17,040 --> 00:03:20,580
anyone heard of the forgetting curve

77
00:03:20,580 --> 00:03:24,319
heard of that forgetting curve

78
00:03:24,560 --> 00:03:27,420
one I think one research a very famous

79
00:03:27,420 --> 00:03:30,659
researcher he's he's analyzing human

80
00:03:30,659 --> 00:03:32,819
brains and he finds out the forgetting

81
00:03:32,819 --> 00:03:35,940
curve so it's it's like that it's like

82
00:03:35,940 --> 00:03:37,140
that

83
00:03:37,140 --> 00:03:38,519
um

84
00:03:38,519 --> 00:03:43,319
if if you uh not like this okay it's

85
00:03:43,319 --> 00:03:46,400
it's something like

86
00:03:48,120 --> 00:03:50,760
so this is the forgetting percentage for

87
00:03:50,760 --> 00:03:53,159
getting percentage okay you do not need

88
00:03:53,159 --> 00:03:54,780
to memorize that

89
00:03:54,780 --> 00:03:57,299
because then let's say it's 100 100

90
00:03:57,299 --> 00:03:59,280
means you totally forget you totally

91
00:03:59,280 --> 00:04:01,980
forget and then at the beginning at the

92
00:04:01,980 --> 00:04:04,260
beginning we remember everything

93
00:04:04,260 --> 00:04:07,319
we remember everything but then

94
00:04:07,319 --> 00:04:09,420
days after days

95
00:04:09,420 --> 00:04:10,920
you kind of

96
00:04:10,920 --> 00:04:13,379
you're kind of starting for forget these

97
00:04:13,379 --> 00:04:14,939
things especially if you do not

98
00:04:14,939 --> 00:04:17,519
understand that however there is a one

99
00:04:17,519 --> 00:04:20,760
way there's one way to extend this

100
00:04:20,760 --> 00:04:24,240
period to extend this period which means

101
00:04:24,240 --> 00:04:27,000
that is you need to refreshing what you

102
00:04:27,000 --> 00:04:28,199
have learned

103
00:04:28,199 --> 00:04:31,740
let's say the second day

104
00:04:31,740 --> 00:04:34,860
for example I I learned this Monday then

105
00:04:34,860 --> 00:04:37,680
you'll refresh it on Tuesday then at

106
00:04:37,680 --> 00:04:39,660
after three days you refresh it again

107
00:04:39,660 --> 00:04:43,020
after one week you'll refresh again then

108
00:04:43,020 --> 00:04:46,080
then if you continue doing that continue

109
00:04:46,080 --> 00:04:49,020
doing that eventually you you're

110
00:04:49,020 --> 00:04:50,880
forgetting Curve will be like 30

111
00:04:50,880 --> 00:04:52,800
percentage so it means that you can

112
00:04:52,800 --> 00:04:55,139
almost remember 70 percentage of the

113
00:04:55,139 --> 00:04:56,280
knowledge

114
00:04:56,280 --> 00:04:58,500
for very very long time that is a

115
00:04:58,500 --> 00:04:59,880
forgetting curve

116
00:04:59,880 --> 00:05:02,040
all right so um

117
00:05:02,040 --> 00:05:04,620
yeah so this is just one thing yeah what

118
00:05:04,620 --> 00:05:08,840
is the process let's refresh it yes

119
00:05:21,080 --> 00:05:25,259
encounter like an input and output

120
00:05:25,259 --> 00:05:27,960
yes very good very good very good

121
00:05:27,960 --> 00:05:30,620
uh

122
00:05:35,100 --> 00:05:37,820
say again

123
00:05:39,300 --> 00:05:43,699
what is my graph have to do with what

124
00:05:44,880 --> 00:05:47,580
oh okay that is um

125
00:05:47,580 --> 00:05:50,280
that is the forgetting curve that is uh

126
00:05:50,280 --> 00:05:53,340
I hope everyone I hope you guys can

127
00:05:53,340 --> 00:05:55,199
because in this course we are going to

128
00:05:55,199 --> 00:05:56,820
learn our

129
00:05:56,820 --> 00:06:00,180
um 300 Concepts New Concepts forgetting

130
00:06:00,180 --> 00:06:03,180
curve means that you need to after you

131
00:06:03,180 --> 00:06:05,419
learn that you need to continually

132
00:06:05,419 --> 00:06:07,699
refresh that like

133
00:06:07,699 --> 00:06:10,320
like look at the slides look at the

134
00:06:10,320 --> 00:06:13,100
textbooks that

135
00:06:16,639 --> 00:06:20,460
So eventually you do not need to

136
00:06:20,460 --> 00:06:23,340
um you can easily remember everything

137
00:06:23,340 --> 00:06:24,360
okay

138
00:06:24,360 --> 00:06:26,780
so a process of

139
00:06:26,780 --> 00:06:29,819
variables right we have variables inputs

140
00:06:29,819 --> 00:06:32,880
outputs right and address space so the

141
00:06:32,880 --> 00:06:35,639
dress phase means like where exactly the

142
00:06:35,639 --> 00:06:37,680
location of this process in the memory

143
00:06:37,680 --> 00:06:39,780
when we load that and what is the

144
00:06:39,780 --> 00:06:43,139
process process is a running a running

145
00:06:43,139 --> 00:06:45,360
program right program is like your code

146
00:06:45,360 --> 00:06:47,639
so a process is a running program

147
00:06:47,639 --> 00:06:50,699
when we loaded that it is starting to

148
00:06:50,699 --> 00:06:54,000
execute that okay and what is

149
00:06:54,000 --> 00:06:55,380
multi-programming what is

150
00:06:55,380 --> 00:06:58,220
multi-programming

151
00:07:00,060 --> 00:07:03,060
multi-programming

152
00:07:24,000 --> 00:07:26,819
yes yes very good very good what's your

153
00:07:26,819 --> 00:07:28,340
name

154
00:07:28,340 --> 00:07:32,520
thank you genre right

155
00:07:32,520 --> 00:07:37,080
so multi-programming is is a first what

156
00:07:37,080 --> 00:07:39,000
channel mentioned that is very good is a

157
00:07:39,000 --> 00:07:42,000
time sharing approach right so time who

158
00:07:42,000 --> 00:07:43,680
is doing the time sharing CPU is doing

159
00:07:43,680 --> 00:07:46,099
the time sharing right so

160
00:07:46,099 --> 00:07:48,840
multi-programming we

161
00:07:48,840 --> 00:07:51,360
we run multiple programs at the same

162
00:07:51,360 --> 00:07:53,580
time and CPU is

163
00:07:53,580 --> 00:07:56,400
evenly distributes the time between them

164
00:07:56,400 --> 00:07:58,380
and why we need to do multi-programming

165
00:07:58,380 --> 00:08:01,199
because we want to improve the system's

166
00:08:01,199 --> 00:08:02,280
throughput

167
00:08:02,280 --> 00:08:05,099
because we do not want to just solve one

168
00:08:05,099 --> 00:08:07,199
user one program we want to serve many

169
00:08:07,199 --> 00:08:10,380
user many programs nowadays now we

170
00:08:10,380 --> 00:08:13,520
learned uh some interesting

171
00:08:13,520 --> 00:08:18,800
Concepts about programs process States

172
00:08:19,860 --> 00:08:23,400
so there's three states

173
00:08:23,400 --> 00:08:26,240
what are they

174
00:08:27,120 --> 00:08:29,099
yeah what's your name

175
00:08:29,099 --> 00:08:31,979
Angelia Andrew

176
00:08:31,979 --> 00:08:33,958
or running ready on the Block okay very

177
00:08:33,958 --> 00:08:37,879
good so running ready and block

178
00:08:44,820 --> 00:08:47,279
so um Can anyone describe the

179
00:08:47,279 --> 00:08:51,200
relationship between these three states

180
00:08:52,380 --> 00:08:56,580
yes so running is when the program as

181
00:08:56,580 --> 00:08:59,220
the name States is running and it's in

182
00:08:59,220 --> 00:09:01,260
the CPU and it's running ready is when

183
00:09:01,260 --> 00:09:02,700
it's ready to be run there's nothing

184
00:09:02,700 --> 00:09:04,019
stopping it other than the fact that

185
00:09:04,019 --> 00:09:06,420
like all the other there aren't any CPUs

186
00:09:06,420 --> 00:09:08,519
available so it's in like a queue I

187
00:09:08,519 --> 00:09:11,839
believe yeah there's a cue

188
00:09:12,000 --> 00:09:13,860
yeah waiting for Iowa for something the

189
00:09:13,860 --> 00:09:16,200
relationship between these three states

190
00:09:16,200 --> 00:09:19,580
the relationship relationship

191
00:09:23,459 --> 00:09:25,980
but a running program can go from ready

192
00:09:25,980 --> 00:09:28,200
and a writing program can go go to run

193
00:09:28,200 --> 00:09:29,760
but

194
00:09:29,760 --> 00:09:31,560
I forgot whether yeah I believe a block

195
00:09:31,560 --> 00:09:35,459
program can go to ready and yeah block

196
00:09:35,459 --> 00:09:36,779
program can go to ready and running

197
00:09:36,779 --> 00:09:38,700
programs go to block if I remember

198
00:09:38,700 --> 00:09:40,440
correctly

199
00:09:40,440 --> 00:09:44,880
yes very good very good so why why is

200
00:09:44,880 --> 00:09:49,140
why okay uh question why why block why

201
00:09:49,140 --> 00:09:50,459
block

202
00:09:50,459 --> 00:09:52,980
process cannot go directly to the

203
00:09:52,980 --> 00:09:55,640
running stage

204
00:09:58,740 --> 00:10:02,600
very good very good

205
00:10:03,300 --> 00:10:06,540
so this this is it needs to be loaded to

206
00:10:06,540 --> 00:10:08,279
the memory to the queue to the

207
00:10:08,279 --> 00:10:09,899
scheduling queue of the memory first

208
00:10:09,899 --> 00:10:13,459
right and uh

209
00:10:14,339 --> 00:10:16,740
while running State why ready States

210
00:10:16,740 --> 00:10:20,180
cannot go to block state

211
00:10:28,860 --> 00:10:31,399
again

212
00:10:41,339 --> 00:10:43,920
the ready why the radius The Wider ready

213
00:10:43,920 --> 00:10:46,079
process so the ready process is in the

214
00:10:46,079 --> 00:10:49,200
cured CPU scheduling queue right it's in

215
00:10:49,200 --> 00:10:51,480
the queue right so it's waiting to be

216
00:10:51,480 --> 00:10:54,779
scheduled waiting to be scheduled

217
00:10:54,779 --> 00:10:58,380
so why why the ready process cannot

218
00:10:58,380 --> 00:11:00,540
be blocked

219
00:11:00,540 --> 00:11:04,160
why they cannot be blocked

220
00:11:04,740 --> 00:11:08,180
it's a tricky question yes

221
00:11:16,800 --> 00:11:19,560
yes very close very close very good so

222
00:11:19,560 --> 00:11:21,660
why why the ready process cannot be get

223
00:11:21,660 --> 00:11:22,740
blocked

224
00:11:22,740 --> 00:11:25,980
who can get blocked when you block a

225
00:11:25,980 --> 00:11:28,320
process you need to send a single what

226
00:11:28,320 --> 00:11:30,720
is a single interrupt single right you

227
00:11:30,720 --> 00:11:32,459
can only send the interrupted single to

228
00:11:32,459 --> 00:11:34,440
who is running

229
00:11:34,440 --> 00:11:37,019
right the ready the ready the ready

230
00:11:37,019 --> 00:11:40,079
process is it's not running he he is

231
00:11:40,079 --> 00:11:42,779
staying staying in the queue in the

232
00:11:42,779 --> 00:11:45,000
schedule queue so no one can stop it he

233
00:11:45,000 --> 00:11:46,680
cannot receive the single interrupt

234
00:11:46,680 --> 00:11:49,079
single so that is why he can we cannot

235
00:11:49,079 --> 00:11:51,300
send a process from a registry to block

236
00:11:51,300 --> 00:11:54,240
space okay okay let's quickly review

237
00:11:54,240 --> 00:11:56,899
this okay

238
00:11:57,360 --> 00:11:59,160
okay and then

239
00:11:59,160 --> 00:12:02,339
um I'm asking you uh a formula okay so

240
00:12:02,339 --> 00:12:05,100
if I have a process which is 30

241
00:12:05,100 --> 00:12:08,519
percentage I always we know that this

242
00:12:08,519 --> 00:12:11,760
process is P1 it has 30 percentage of i

243
00:12:11,760 --> 00:12:13,260
o weights

244
00:12:13,260 --> 00:12:16,019
I always means

245
00:12:16,019 --> 00:12:17,220
means

246
00:12:17,220 --> 00:12:20,040
he's doing the IO

247
00:12:20,040 --> 00:12:22,079
okay he's doing the io

248
00:12:22,079 --> 00:12:25,079
he has let's say this P1 right his pen

249
00:12:25,079 --> 00:12:27,480
is 30 percentage of time to do the i o

250
00:12:27,480 --> 00:12:29,640
to do the i o wage

251
00:12:29,640 --> 00:12:32,060
still

252
00:12:32,220 --> 00:12:36,920
then what is the CPU utilization

253
00:12:38,940 --> 00:12:42,240
what is the CPU utilization or the OS of

254
00:12:42,240 --> 00:12:44,760
this OS

255
00:12:44,760 --> 00:12:47,360
yes

256
00:12:57,240 --> 00:13:01,100
yeah what's the percentage of that

257
00:13:01,680 --> 00:13:04,459
percentage

258
00:13:07,500 --> 00:13:10,579
one just one

259
00:13:15,360 --> 00:13:18,480
you're very good 70 percentage right 70

260
00:13:18,480 --> 00:13:21,300
percentage so what if I have P1

261
00:13:21,300 --> 00:13:24,660
I have P1 who doing 30 percentage of the

262
00:13:24,660 --> 00:13:27,060
io weight

263
00:13:27,060 --> 00:13:30,720
and another P2 so the multi-programming

264
00:13:30,720 --> 00:13:33,120
degrees two right we have P1 P2 is doing

265
00:13:33,120 --> 00:13:36,660
this 20 percentage of the i o weights

266
00:13:36,660 --> 00:13:40,519
then what is a CPU utilization

267
00:13:41,399 --> 00:13:44,240
yes okay

268
00:13:46,920 --> 00:13:49,820
what will be that

269
00:13:55,320 --> 00:13:57,060
yeah

270
00:13:57,060 --> 00:14:00,139
if I have two process running

271
00:14:00,139 --> 00:14:04,560
concurrently on top of the OS one

272
00:14:04,560 --> 00:14:07,260
computer okay one

273
00:14:07,260 --> 00:14:11,639
P1 have 30 percentage of IO weight

274
00:14:11,639 --> 00:14:14,700
time and P2 or 20 percentage of ioa time

275
00:14:14,700 --> 00:14:17,820
what is the average CPU utilization

276
00:14:17,820 --> 00:14:20,839
of this system

277
00:14:22,320 --> 00:14:24,920
yes

278
00:14:28,079 --> 00:14:33,660
how much uh one minus 0.3 times 10.2 so

279
00:14:33,660 --> 00:14:35,339
uh 94 percent

280
00:14:35,339 --> 00:14:38,220
very good very good

281
00:14:38,220 --> 00:14:39,480
okay

282
00:14:39,480 --> 00:14:43,019
so there's a formula in our slide so you

283
00:14:43,019 --> 00:14:45,300
feel free to look at that okay another

284
00:14:45,300 --> 00:14:49,440
question is that what is the What is the

285
00:14:49,440 --> 00:14:51,480
thread

286
00:14:51,480 --> 00:14:54,800
we as process

287
00:14:55,740 --> 00:14:57,600
the differences between thread and

288
00:14:57,600 --> 00:15:00,000
process

289
00:15:00,000 --> 00:15:02,660
yes

290
00:15:04,639 --> 00:15:06,899
and if I understood

291
00:15:06,899 --> 00:15:09,180
um and I've understood this morning's um

292
00:15:09,180 --> 00:15:10,980
discussion section properly

293
00:15:10,980 --> 00:15:12,660
um

294
00:15:12,660 --> 00:15:14,220
a direction where the process applies to

295
00:15:14,220 --> 00:15:16,820
the entire program

296
00:15:16,820 --> 00:15:19,260
what's the difference is between these

297
00:15:19,260 --> 00:15:21,380
two

298
00:15:25,680 --> 00:15:28,019
they come they have they have the same

299
00:15:28,019 --> 00:15:29,760
stays right but what's the difference is

300
00:15:29,760 --> 00:15:33,360
that that is the they are common scenes

301
00:15:33,360 --> 00:15:35,899
yeah yeah

302
00:15:44,839 --> 00:15:50,519
very good so if if multiple threats they

303
00:15:50,519 --> 00:15:53,399
are they are created by the same process

304
00:15:53,399 --> 00:15:55,500
then they are going to share the same

305
00:15:55,500 --> 00:15:57,779
address space however if different

306
00:15:57,779 --> 00:16:01,260
threads are if there are two threads

307
00:16:01,260 --> 00:16:03,720
they are created by different process

308
00:16:03,720 --> 00:16:06,660
than they have independent independent

309
00:16:06,660 --> 00:16:10,380
or just space so one one day if they are

310
00:16:10,380 --> 00:16:13,320
created if I have three threads they are

311
00:16:13,320 --> 00:16:15,480
created by the same process they share

312
00:16:15,480 --> 00:16:17,459
the address space means they are going

313
00:16:17,459 --> 00:16:20,160
to be loaded into the same memory and

314
00:16:20,160 --> 00:16:22,459
then they are going to share many

315
00:16:22,459 --> 00:16:25,019
registers if you register so when we do

316
00:16:25,019 --> 00:16:27,440
context switch it's much easier

317
00:16:27,440 --> 00:16:30,060
so that is why thread is more

318
00:16:30,060 --> 00:16:32,600
lightweight

319
00:16:36,480 --> 00:16:39,019
together

320
00:16:41,339 --> 00:16:44,339
okay so what is a race condition

321
00:16:44,339 --> 00:16:47,420
oh it's a race condition

322
00:16:47,480 --> 00:16:51,740
before that what is IPC

323
00:16:53,040 --> 00:16:54,420
IPC

324
00:16:54,420 --> 00:16:56,759
in the process communication very good

325
00:16:56,759 --> 00:17:01,040
then what is race condition

326
00:17:04,140 --> 00:17:07,220
what is the race condition

327
00:17:09,299 --> 00:17:12,000
in which scenario race condition will

328
00:17:12,000 --> 00:17:13,679
happen

329
00:17:13,679 --> 00:17:17,520
when two processes or threats look at a

330
00:17:17,520 --> 00:17:19,079
share variable but

331
00:17:19,079 --> 00:17:21,059
to be

332
00:17:21,059 --> 00:17:22,260
because they read anything comes those

333
00:17:22,260 --> 00:17:24,240
develop

334
00:17:24,240 --> 00:17:26,880
ment they read they read

335
00:17:26,880 --> 00:17:29,660
they read

336
00:17:37,340 --> 00:17:39,960
not exactly

337
00:17:39,960 --> 00:17:42,559
yes

338
00:17:49,860 --> 00:17:51,720
they are all writing each other very

339
00:17:51,720 --> 00:17:53,280
good they are overwriting each other

340
00:17:53,280 --> 00:17:55,860
then why what is race condition what

341
00:17:55,860 --> 00:17:57,660
scenarios race condition what happened

342
00:17:57,660 --> 00:18:00,840
they are all writing each other and then

343
00:18:00,840 --> 00:18:02,700
they are all writing a race condition

344
00:18:02,700 --> 00:18:05,820
happens very rarely like if I for

345
00:18:05,820 --> 00:18:08,520
example I ask several persons to share

346
00:18:08,520 --> 00:18:11,460
one variable by share I means not just

347
00:18:11,460 --> 00:18:14,340
read not just read you need to change

348
00:18:14,340 --> 00:18:16,559
the value read and write read and write

349
00:18:16,559 --> 00:18:19,320
right so each other they can they can

350
00:18:19,320 --> 00:18:21,660
override with each one right and then

351
00:18:21,660 --> 00:18:24,539
but the race condition may happen or may

352
00:18:24,539 --> 00:18:26,160
not happen in which scenario it will

353
00:18:26,160 --> 00:18:30,600
happen that is just one presumption

354
00:18:32,280 --> 00:18:34,140
and then

355
00:18:34,140 --> 00:18:37,020
so if we have several process

356
00:18:37,020 --> 00:18:38,400
we're going to

357
00:18:38,400 --> 00:18:42,419
read and write the same variable

358
00:18:42,419 --> 00:18:43,740
together

359
00:18:43,740 --> 00:18:45,480
concurrently

360
00:18:45,480 --> 00:18:48,020
and

361
00:18:53,160 --> 00:18:56,640
yes very good so when they are when they

362
00:18:56,640 --> 00:19:00,120
are read and write the values the shared

363
00:19:00,120 --> 00:19:02,520
values this read and write operations

364
00:19:02,520 --> 00:19:05,160
are not Atomic operation if they are not

365
00:19:05,160 --> 00:19:07,559
Atomic operation and the contact switch

366
00:19:07,559 --> 00:19:09,059
happens

367
00:19:09,059 --> 00:19:11,100
when they are doing these operations

368
00:19:11,100 --> 00:19:12,840
then raise conditions will happen and

369
00:19:12,840 --> 00:19:15,780
release conditions it's uh is why the

370
00:19:15,780 --> 00:19:17,520
race condition happens because we we

371
00:19:17,520 --> 00:19:20,700
have no assumption about how the CPU is

372
00:19:20,700 --> 00:19:23,880
gathering between different processes in

373
00:19:23,880 --> 00:19:26,100
the first class at how you CPU can only

374
00:19:26,100 --> 00:19:28,620
run one core of the CPU can only run one

375
00:19:28,620 --> 00:19:31,919
process at a time and the scheduling or

376
00:19:31,919 --> 00:19:34,919
speed is very fast in Nano seconds so no

377
00:19:34,919 --> 00:19:39,059
one can no one can expect estimates the

378
00:19:39,059 --> 00:19:41,160
order of how when the contact switch

379
00:19:41,160 --> 00:19:43,980
will happen so it's so that's if color

380
00:19:43,980 --> 00:19:46,620
switch happens in the case one different

381
00:19:46,620 --> 00:19:48,840
process are read and write the same

382
00:19:48,840 --> 00:19:50,820
value the race condition will happen and

383
00:19:50,820 --> 00:19:55,320
you got unexpected results okay that is

384
00:19:55,320 --> 00:19:57,840
what we learned the definition of the

385
00:19:57,840 --> 00:20:00,179
textbook

386
00:20:00,179 --> 00:20:02,460
so what we are trying to go trying to do

387
00:20:02,460 --> 00:20:05,460
to avoid the race condition what we what

388
00:20:05,460 --> 00:20:07,080
we have tried to do to avoid the race

389
00:20:07,080 --> 00:20:09,380
condition

390
00:20:09,720 --> 00:20:12,539
how to fix that

391
00:20:12,539 --> 00:20:14,880
how to fix the race condition we have

392
00:20:14,880 --> 00:20:18,559
tried several approaches yes

393
00:20:23,520 --> 00:20:26,280
yeah very good critical region so a

394
00:20:26,280 --> 00:20:29,220
critical region is just a term it's just

395
00:20:29,220 --> 00:20:33,059
a term so what technical we have do we

396
00:20:33,059 --> 00:20:34,799
have to do to

397
00:20:34,799 --> 00:20:38,600
enable critical region

398
00:20:40,980 --> 00:20:45,140
well technical we proposed

399
00:20:45,480 --> 00:20:50,059
semaphone mutex is very good okay

400
00:20:55,140 --> 00:20:59,840
so what is someone what is mutex

401
00:21:05,700 --> 00:21:09,000
some forms mutex

402
00:21:09,000 --> 00:21:10,620
okay let me

403
00:21:10,620 --> 00:21:14,299
excuse me some of us

404
00:21:15,480 --> 00:21:18,020
would be

405
00:21:24,000 --> 00:21:25,799
what's the difference between some

406
00:21:25,799 --> 00:21:28,620
phones and mutex

407
00:21:28,620 --> 00:21:31,020
yeah

408
00:21:31,020 --> 00:21:33,299
no no no not really your slide okay

409
00:21:33,299 --> 00:21:35,039
let's

410
00:21:35,039 --> 00:21:38,659
look at me and answer that

411
00:21:38,880 --> 00:21:40,919
is the word

412
00:21:40,919 --> 00:21:45,440
figuring mechanism very good and

413
00:21:49,100 --> 00:21:51,240
restricted number of the share

414
00:21:51,240 --> 00:21:55,700
availables to access and

415
00:21:57,720 --> 00:22:00,980
okay and uh

416
00:22:01,590 --> 00:22:04,640
[Music]

417
00:22:04,640 --> 00:22:07,679
the first differences of the mutex in

418
00:22:07,679 --> 00:22:10,380
some form is that

419
00:22:10,380 --> 00:22:12,980
yes

420
00:22:13,340 --> 00:22:16,320
I remember the bathroom example where

421
00:22:16,320 --> 00:22:19,020
you have where you have all the um where

422
00:22:19,020 --> 00:22:20,340
you have all the bathrooms that are

423
00:22:20,340 --> 00:22:22,200
locked and you have like the and you

424
00:22:22,200 --> 00:22:25,400
have the um and you have the

425
00:22:32,780 --> 00:22:35,460
which I which I assume is the view text

426
00:22:35,460 --> 00:22:37,980
in this in the in this analogy would

427
00:22:37,980 --> 00:22:39,659
basically just assign threats like

428
00:22:39,659 --> 00:22:41,640
different CPUs in a way or like

429
00:22:41,640 --> 00:22:43,020
different parts of the no different

430
00:22:43,020 --> 00:22:44,880
parts of the memory I think

431
00:22:44,880 --> 00:22:47,220
but but yeah basically different threads

432
00:22:47,220 --> 00:22:48,720
get assigned in different places

433
00:22:48,720 --> 00:22:50,640
other threats have to be queued up for

434
00:22:50,640 --> 00:22:54,500
like going to those places I think

435
00:22:55,620 --> 00:22:56,780
um

436
00:22:56,780 --> 00:23:01,020
uh not exactly it seems it means some

437
00:23:01,020 --> 00:23:04,620
for a little bit okay okay first first

438
00:23:04,620 --> 00:23:07,320
they are both integers right

439
00:23:07,320 --> 00:23:09,900
they're both integers right

440
00:23:09,900 --> 00:23:11,580
right

441
00:23:11,580 --> 00:23:14,240
they're both integers right

442
00:23:14,240 --> 00:23:17,220
non-lactive integers right learn active

443
00:23:17,220 --> 00:23:19,080
they have to be

444
00:23:19,080 --> 00:23:21,179
they have to be equal or larger than

445
00:23:21,179 --> 00:23:24,360
zero right long lactive right and about

446
00:23:24,360 --> 00:23:27,299
per mutex

447
00:23:27,299 --> 00:23:30,140
is a lock

448
00:23:30,179 --> 00:23:34,020
it only has two values right

449
00:23:34,020 --> 00:23:37,980
zero or one true or false right either

450
00:23:37,980 --> 00:23:40,200
you get it or you lose it

451
00:23:40,200 --> 00:23:42,299
because also fixing of their balls to

452
00:23:42,299 --> 00:23:44,700
integer mutex is just a special someone

453
00:23:44,700 --> 00:23:46,860
with just a special Symphony

454
00:23:46,860 --> 00:23:49,980
but some of them is

455
00:23:49,980 --> 00:23:52,919
it can be a value of n right as long as

456
00:23:52,919 --> 00:23:54,720
it is larger

457
00:23:54,720 --> 00:23:57,900
is now negative value okay it can be

458
00:23:57,900 --> 00:23:59,940
so why we use some form we use some

459
00:23:59,940 --> 00:24:02,340
phone to represent the number of

460
00:24:02,340 --> 00:24:04,799
resources that we can share between

461
00:24:04,799 --> 00:24:08,880
different process right the mutex is log

462
00:24:08,880 --> 00:24:11,179
so mutex has

463
00:24:11,179 --> 00:24:13,080
ownership

464
00:24:13,080 --> 00:24:15,960
remember that ownership

465
00:24:15,960 --> 00:24:17,820
ownership

466
00:24:17,820 --> 00:24:20,460
so you either get a key or you lose a

467
00:24:20,460 --> 00:24:23,360
lose the key

468
00:24:37,340 --> 00:24:39,960
that's a good question you do you

469
00:24:39,960 --> 00:24:43,860
remember the producer customer problems

470
00:24:43,860 --> 00:24:46,380
produce a customer program right you

471
00:24:46,380 --> 00:24:47,820
remember that

472
00:24:47,820 --> 00:24:51,480
producer customer for how we

473
00:24:51,480 --> 00:24:54,360
what do we sell some form for

474
00:24:54,360 --> 00:24:55,500
forward

475
00:24:55,500 --> 00:24:58,520
for the number of

476
00:24:59,340 --> 00:25:01,260
is

477
00:25:01,260 --> 00:25:03,299
yes very good so in the producer

478
00:25:03,299 --> 00:25:05,520
customer problems you remember we set

479
00:25:05,520 --> 00:25:07,140
two samples

480
00:25:07,140 --> 00:25:08,280
right

481
00:25:08,280 --> 00:25:11,039
one is for the number of

482
00:25:11,039 --> 00:25:13,820
number of

483
00:25:15,059 --> 00:25:17,100
the buffer right the buffer the buffer

484
00:25:17,100 --> 00:25:19,559
says the empty buffer size and the now

485
00:25:19,559 --> 00:25:22,580
empty buffer size

486
00:25:32,100 --> 00:25:34,580
let's see

487
00:25:36,299 --> 00:25:38,880
so check this check this okay so so

488
00:25:38,880 --> 00:25:41,220
check this let's refresh this okay

489
00:25:41,220 --> 00:25:44,220
here mutex is only has two values one

490
00:25:44,220 --> 00:25:46,080
was zero right

491
00:25:46,080 --> 00:25:50,279
so when we when we use new text you see

492
00:25:50,279 --> 00:25:53,640
this when you enter the critical region

493
00:25:53,640 --> 00:25:55,620
when you enter there may be many

494
00:25:55,620 --> 00:25:58,200
producers there are maybe many customers

495
00:25:58,200 --> 00:25:59,940
right

496
00:25:59,940 --> 00:26:02,159
there are many there there will be many

497
00:26:02,159 --> 00:26:04,260
producers there will be many customers

498
00:26:04,260 --> 00:26:07,020
okay it can be larger it can be larger

499
00:26:07,020 --> 00:26:10,940
than n it can be larger than n

500
00:26:11,700 --> 00:26:15,600
you see for any pro and what is the

501
00:26:15,600 --> 00:26:17,520
critical region what is the critical

502
00:26:17,520 --> 00:26:21,140
region the critical region is here

503
00:26:23,100 --> 00:26:24,600
right

504
00:26:24,600 --> 00:26:27,980
the critical region is here

505
00:26:33,120 --> 00:26:34,260
right

506
00:26:34,260 --> 00:26:36,600
the critical region is the buffer it's a

507
00:26:36,600 --> 00:26:39,720
buffer when we when we change the buffer

508
00:26:39,720 --> 00:26:41,640
when we when we insert the item we

509
00:26:41,640 --> 00:26:44,700
remove the item out of the buffer that

510
00:26:44,700 --> 00:26:47,220
means this process is entering into the

511
00:26:47,220 --> 00:26:49,080
critical region so we need to protect

512
00:26:49,080 --> 00:26:52,320
that to protect that you gave you gave a

513
00:26:52,320 --> 00:26:53,760
lock

514
00:26:53,760 --> 00:26:56,520
to the process who entered the critical

515
00:26:56,520 --> 00:26:59,700
region so we only have one mutex you see

516
00:26:59,700 --> 00:27:02,100
that we only have one mutex why we only

517
00:27:02,100 --> 00:27:05,159
want new text because we only allow

518
00:27:05,159 --> 00:27:08,220
this example remember we only allow

519
00:27:08,220 --> 00:27:12,059
one process to change that

520
00:27:12,059 --> 00:27:14,279
you you guys will remember the critical

521
00:27:14,279 --> 00:27:17,120
region definition

522
00:27:29,659 --> 00:27:35,059
Mutual exclusion right Mutual exclusion

523
00:27:35,340 --> 00:27:37,559
no process outside clear region can

524
00:27:37,559 --> 00:27:40,380
block other process low starvation so we

525
00:27:40,380 --> 00:27:43,320
give this example one process a is in

526
00:27:43,320 --> 00:27:45,360
the critical region process B cannot be

527
00:27:45,360 --> 00:27:47,700
in that also process C cannot be into

528
00:27:47,700 --> 00:27:50,760
that now in this example in in the

529
00:27:50,760 --> 00:27:53,700
producer customer example

530
00:27:53,700 --> 00:27:56,400
we look at that the buffer is the buffer

531
00:27:56,400 --> 00:28:00,059
is the critical region right

532
00:28:00,059 --> 00:28:03,779
only one process only one process can be

533
00:28:03,779 --> 00:28:06,000
there can be many producer process or

534
00:28:06,000 --> 00:28:08,340
customer process only one can enter the

535
00:28:08,340 --> 00:28:10,620
critical region so that is why

536
00:28:10,620 --> 00:28:15,200
they fetch we don't know this

537
00:28:15,720 --> 00:28:17,820
notice

538
00:28:17,820 --> 00:28:20,039
is there so only one

539
00:28:20,039 --> 00:28:22,679
can get the lock

540
00:28:22,679 --> 00:28:25,620
you see this is the down means you get a

541
00:28:25,620 --> 00:28:28,200
log you get a lock and the apple means

542
00:28:28,200 --> 00:28:29,760
you release the lock

543
00:28:29,760 --> 00:28:32,820
right same thing happens here you down

544
00:28:32,820 --> 00:28:36,260
the log you release the lock

545
00:28:36,419 --> 00:28:39,360
right however however we are

546
00:28:39,360 --> 00:28:41,760
manipulating a buffer producer customers

547
00:28:41,760 --> 00:28:44,159
and they are working on the buffer the

548
00:28:44,159 --> 00:28:45,419
buffer has

549
00:28:45,419 --> 00:28:49,380
the buffer has earned number of

550
00:28:49,380 --> 00:28:53,279
shared items right so we need to use the

551
00:28:53,279 --> 00:28:56,159
here we use we use the

552
00:28:56,159 --> 00:28:59,400
here the Mt and also this is the four

553
00:28:59,400 --> 00:29:03,240
we use this to represent the

554
00:29:03,240 --> 00:29:06,720
number of the variables that are shared

555
00:29:06,720 --> 00:29:09,539
between between the uh between uh

556
00:29:09,539 --> 00:29:11,760
multiple process

557
00:29:11,760 --> 00:29:14,299
okay

558
00:29:20,940 --> 00:29:24,779
okay so a barrier then as a

559
00:29:24,779 --> 00:29:27,240
um our last class we learned about the

560
00:29:27,240 --> 00:29:30,000
barrier so why we lead barrier why we

561
00:29:30,000 --> 00:29:32,600
lead barrier

562
00:29:37,260 --> 00:29:39,000
why read it barrier

563
00:29:39,000 --> 00:29:41,760
yeah what's the name what's your name

564
00:29:41,760 --> 00:29:43,080
Ariel

565
00:29:43,080 --> 00:29:45,620
Aryan

566
00:29:51,899 --> 00:29:54,899
before go to the next stage right so why

567
00:29:54,899 --> 00:29:57,779
we need a barrier any student think of

568
00:29:57,779 --> 00:30:00,419
that investors in what kind of scenario

569
00:30:00,419 --> 00:30:03,320
we need a barrier

570
00:30:09,120 --> 00:30:12,600
what kind of scenario we need a barrier

571
00:30:12,600 --> 00:30:16,340
in real life in real life

572
00:30:31,980 --> 00:30:35,460
uh yeah very good yeah so um so any

573
00:30:35,460 --> 00:30:37,500
students know real life example real

574
00:30:37,500 --> 00:30:40,380
life means it happens it happens every

575
00:30:40,380 --> 00:30:42,620
day

576
00:30:54,620 --> 00:30:57,840
uh tickets or that's a tricky question

577
00:30:57,840 --> 00:31:00,419
tickets asked is um

578
00:31:00,419 --> 00:31:03,539
any other sort any other sort of the

579
00:31:03,539 --> 00:31:05,700
real life example why we need a barrier

580
00:31:05,700 --> 00:31:07,940
yeah

581
00:31:09,059 --> 00:31:12,000
very good very good that's very good

582
00:31:12,000 --> 00:31:13,740
yeah if you play a game you need

583
00:31:13,740 --> 00:31:16,559
everyone to be prepared right you need

584
00:31:16,559 --> 00:31:18,240
everyone to be for help

585
00:31:18,240 --> 00:31:20,940
so so everyone is ready everyone is

586
00:31:20,940 --> 00:31:23,039
ready you remember that when you play

587
00:31:23,039 --> 00:31:24,960
the games right the League of Legends is

588
00:31:24,960 --> 00:31:27,659
see everyone is ready then we we go in

589
00:31:27,659 --> 00:31:29,640
and then we still have a synchronization

590
00:31:29,640 --> 00:31:32,279
process

591
00:31:32,279 --> 00:31:34,440
remember that the loading page the

592
00:31:34,440 --> 00:31:36,240
loading page sometimes it takes just

593
00:31:36,240 --> 00:31:37,919
several seconds sometimes it takes one

594
00:31:37,919 --> 00:31:40,620
minute what they are waiting for they

595
00:31:40,620 --> 00:31:43,380
are waiting to they are waiting everyone

596
00:31:43,380 --> 00:31:46,380
to reach the barrier to reach the

597
00:31:46,380 --> 00:31:49,559
barrier so we can open a shared scenario

598
00:31:49,559 --> 00:31:51,960
the game scenario is a shield scenario

599
00:31:51,960 --> 00:31:54,260
yes

600
00:31:57,840 --> 00:32:00,240
what chapter

601
00:32:00,240 --> 00:32:01,860
oh okay that's a very good question

602
00:32:01,860 --> 00:32:03,720
there's no chapter in the textbook but

603
00:32:03,720 --> 00:32:06,799
this is one important

604
00:32:17,720 --> 00:32:21,419
slides are from the textbook or um or

605
00:32:21,419 --> 00:32:24,240
one thing I I think I mentioned that I

606
00:32:24,240 --> 00:32:26,100
have the solution menu for the textbook

607
00:32:26,100 --> 00:32:29,100
but I cannot share with you to just

608
00:32:29,100 --> 00:32:31,559
publish it on the converse because I I

609
00:32:31,559 --> 00:32:34,860
think I it's illegal I

610
00:32:34,860 --> 00:32:36,539
um please understand that but if you

611
00:32:36,539 --> 00:32:39,299
really want to gathers you can you can

612
00:32:39,299 --> 00:32:43,799
ask my ga and uh so um

613
00:32:43,799 --> 00:32:49,919
oh so he can share with you okay uh

614
00:32:50,880 --> 00:32:55,500
so uh what else oh okay so this today we

615
00:32:55,500 --> 00:32:56,820
are going to start learning the

616
00:32:56,820 --> 00:32:59,520
scheduling algorithms this is very

617
00:32:59,520 --> 00:33:02,100
interesting okay scheduling algorithms

618
00:33:02,100 --> 00:33:04,080
um

619
00:33:04,080 --> 00:33:07,799
why we need this Gathering algorithms

620
00:33:07,799 --> 00:33:10,559
yes what's your name

621
00:33:10,559 --> 00:33:13,559
okay

622
00:33:15,299 --> 00:33:17,700
anyway sometimes you want threads to run

623
00:33:17,700 --> 00:33:20,460
at the same time but you have a limited

624
00:33:20,460 --> 00:33:23,580
number of CPUs so you need to know

625
00:33:23,580 --> 00:33:25,500
whether or not you want the feet to use

626
00:33:25,500 --> 00:33:28,380
to share to share time or have time

627
00:33:28,380 --> 00:33:30,120
distributed among the threads like

628
00:33:30,120 --> 00:33:31,919
they'll each run at different times or

629
00:33:31,919 --> 00:33:34,620
if they're going to run in the same uh

630
00:33:34,620 --> 00:33:36,419
or if they're going to share the space

631
00:33:36,419 --> 00:33:38,580
but I've been running like different

632
00:33:38,580 --> 00:33:40,919
places and yeah basically if you're

633
00:33:40,919 --> 00:33:42,059
dealing with multiple threads you need

634
00:33:42,059 --> 00:33:44,039
to know what each thread is doing it at

635
00:33:44,039 --> 00:33:46,140
each moment or maybe yeah yeah like you

636
00:33:46,140 --> 00:33:47,220
need to know what each thread is doing

637
00:33:47,220 --> 00:33:48,779
and when they're

638
00:33:48,779 --> 00:33:51,299
and that's where scheduling comes in yes

639
00:33:51,299 --> 00:33:54,179
yes very good very good so um

640
00:33:54,179 --> 00:33:57,120
so we have very limited resource uh

641
00:33:57,120 --> 00:33:59,700
still this come to our first lecture we

642
00:33:59,700 --> 00:34:02,700
talk about Osos is just oh any students

643
00:34:02,700 --> 00:34:04,980
still remember the law of the Lua of the

644
00:34:04,980 --> 00:34:06,000
OS

645
00:34:06,000 --> 00:34:10,820
to rules right yes

646
00:34:11,760 --> 00:34:14,099
a resource manager okay so obstruction

647
00:34:14,099 --> 00:34:16,918
resource manager so what we have learned

648
00:34:16,918 --> 00:34:19,800
so far process and stress we have

649
00:34:19,800 --> 00:34:22,080
learned the abstraction of process and

650
00:34:22,080 --> 00:34:24,239
stress now we are going to learn the

651
00:34:24,239 --> 00:34:27,540
resource management mechanisms about the

652
00:34:27,540 --> 00:34:30,480
process and threats so scheduling

653
00:34:30,480 --> 00:34:31,739
algorithms

654
00:34:31,739 --> 00:34:33,899
is one is part of their most important

655
00:34:33,899 --> 00:34:36,839
part of that so Gathering algorithms

656
00:34:36,839 --> 00:34:40,879
um there's many scheduling

657
00:34:42,659 --> 00:34:45,119
thank you

658
00:34:45,119 --> 00:34:47,339
so there's many scattering algorithms

659
00:34:47,339 --> 00:34:49,320
while computerized multi-programmed it

660
00:34:49,320 --> 00:34:51,179
frequently has multiple process and

661
00:34:51,179 --> 00:34:54,119
threads Computing for the competing for

662
00:34:54,119 --> 00:34:57,240
the CPU at the same time

663
00:34:57,240 --> 00:35:00,480
so this situation occurs Whenever two or

664
00:35:00,480 --> 00:35:02,700
more of them are simultaneously in the

665
00:35:02,700 --> 00:35:04,800
already States they are all in the right

666
00:35:04,800 --> 00:35:07,560
state so the queue the radical is larger

667
00:35:07,560 --> 00:35:09,960
than two okay then larger than two if

668
00:35:09,960 --> 00:35:12,119
only one CPU is available a choice has

669
00:35:12,119 --> 00:35:16,500
to be made to decide who to run next who

670
00:35:16,500 --> 00:35:18,720
to run next remember that we have a

671
00:35:18,720 --> 00:35:20,400
radical right

672
00:35:20,400 --> 00:35:22,680
suppose we have more than two processors

673
00:35:22,680 --> 00:35:25,380
or as a rally then we need to decide who

674
00:35:25,380 --> 00:35:27,359
go next

675
00:35:27,359 --> 00:35:29,640
so the part of the operating system that

676
00:35:29,640 --> 00:35:31,920
make the choice is called the scheduler

677
00:35:31,920 --> 00:35:35,400
and the algorithms it used together use

678
00:35:35,400 --> 00:35:39,800
is called scheduling algorithms

679
00:35:44,460 --> 00:35:46,680
so who does not care about scheduling

680
00:35:46,680 --> 00:35:49,500
algorithms so if there's all in one user

681
00:35:49,500 --> 00:35:51,780
who only competes with himself for the

682
00:35:51,780 --> 00:35:54,300
CPU so if there's only one process then

683
00:35:54,300 --> 00:35:57,839
we do not care about scheduling Parts in

684
00:35:57,839 --> 00:36:01,339
today's OS

685
00:36:01,619 --> 00:36:06,359
they're almost more than two processors

686
00:36:12,359 --> 00:36:15,560
okay so uh

687
00:36:15,900 --> 00:36:18,680
where is it

688
00:36:18,960 --> 00:36:21,180
so let's look at the US Gathering

689
00:36:21,180 --> 00:36:25,820
process Behavior so these two these two

690
00:36:30,780 --> 00:36:33,240
so this true process they are actually

691
00:36:33,240 --> 00:36:36,180
on two process Behavior so we can see

692
00:36:36,180 --> 00:36:37,980
that this is the

693
00:36:37,980 --> 00:36:40,020
um

694
00:36:40,020 --> 00:36:42,900
one is the CPU bounded process we call

695
00:36:42,900 --> 00:36:45,000
it we also call it a data intensive

696
00:36:45,000 --> 00:36:47,099
process data intensive process means

697
00:36:47,099 --> 00:36:48,900
that it it

698
00:36:48,900 --> 00:36:50,900
um

699
00:36:51,060 --> 00:36:53,940
it used a lot of it use CPU most of the

700
00:36:53,940 --> 00:36:58,140
time you CPU most of time okay so what

701
00:36:58,140 --> 00:37:01,020
are the examples of the data intensive

702
00:37:01,020 --> 00:37:03,839
data um sorry it's the computation is it

703
00:37:03,839 --> 00:37:06,300
should be called computational intensive

704
00:37:06,300 --> 00:37:08,780
process

705
00:37:09,780 --> 00:37:13,500
a computational intensive process

706
00:37:13,500 --> 00:37:15,500
um

707
00:37:17,400 --> 00:37:21,240
in your in in the in the library in any

708
00:37:21,240 --> 00:37:22,740
uh

709
00:37:22,740 --> 00:37:25,079
so if you are designing a mathematical

710
00:37:25,079 --> 00:37:29,400
process process it will be mostly

711
00:37:29,400 --> 00:37:31,560
um CPU bounded process because it's

712
00:37:31,560 --> 00:37:33,599
doing the computation most of time for

713
00:37:33,599 --> 00:37:36,180
example The Matrix computation

714
00:37:36,180 --> 00:37:39,180
or you if you if you like the doing the

715
00:37:39,180 --> 00:37:41,640
machine learning workload AI work they

716
00:37:41,640 --> 00:37:43,920
actually machine learning is all about

717
00:37:43,920 --> 00:37:46,920
the computations like Matrix

718
00:37:46,920 --> 00:37:49,619
computations right so it's random Matrix

719
00:37:49,619 --> 00:37:51,119
right

720
00:37:51,119 --> 00:37:54,359
so it's it's all CPU bounded process and

721
00:37:54,359 --> 00:37:56,700
then another another kind of process is

722
00:37:56,700 --> 00:37:59,820
i o bounded process

723
00:37:59,820 --> 00:38:00,359
um

724
00:38:00,359 --> 00:38:02,700
iob on it process means that these

725
00:38:02,700 --> 00:38:05,820
process are if it's not it's not using

726
00:38:05,820 --> 00:38:09,480
CPU most of times most of the times

727
00:38:09,480 --> 00:38:12,180
it's just the way for the inputs like

728
00:38:12,180 --> 00:38:15,359
transfer data receive the data copy the

729
00:38:15,359 --> 00:38:17,460
data

730
00:38:17,460 --> 00:38:20,280
so that is the i o bounded process okay

731
00:38:20,280 --> 00:38:23,599
there are two process okay

732
00:38:26,460 --> 00:38:29,940
a key issue related to Gathering is when

733
00:38:29,940 --> 00:38:32,880
to make scattering decisions it turns

734
00:38:32,880 --> 00:38:35,040
out that there are variable situations

735
00:38:35,040 --> 00:38:37,859
in which the Gathering is needed there's

736
00:38:37,859 --> 00:38:41,220
many situations for example when a new

737
00:38:41,220 --> 00:38:43,440
process is created a decision needs to

738
00:38:43,440 --> 00:38:45,540
make whether to run the parent process

739
00:38:45,540 --> 00:38:48,859
and child process

740
00:38:50,220 --> 00:38:52,680
since both process in the United States

741
00:38:52,680 --> 00:38:55,260
is almost Gathering decision and can go

742
00:38:55,260 --> 00:38:57,599
either way okay if a process creates a

743
00:38:57,599 --> 00:39:00,180
child process they are both ready they

744
00:39:00,180 --> 00:39:02,940
are both ready so

745
00:39:02,940 --> 00:39:05,160
you can schedule a parent process or you

746
00:39:05,160 --> 00:39:08,660
can schedule the child process

747
00:39:10,140 --> 00:39:13,020
well when IO interrupts occurs as

748
00:39:13,020 --> 00:39:15,900
Gathering decision may be made if the

749
00:39:15,900 --> 00:39:18,180
interrupts come from IO device that has

750
00:39:18,180 --> 00:39:21,480
now completed its work some process that

751
00:39:21,480 --> 00:39:23,760
was blocked waiting for Io may be ready

752
00:39:23,760 --> 00:39:28,200
to run so what what process

753
00:39:28,200 --> 00:39:30,720
transfer the space from the Block stage

754
00:39:30,720 --> 00:39:33,900
to ready stage then you need to design

755
00:39:33,900 --> 00:39:36,359
whether to go for this first so we'll go

756
00:39:36,359 --> 00:39:38,579
for the other process who is already in

757
00:39:38,579 --> 00:39:39,780
the ready queue

758
00:39:39,780 --> 00:39:42,060
so there's many situations like a

759
00:39:42,060 --> 00:39:44,160
process exists process blocks IO

760
00:39:44,160 --> 00:39:47,339
interrupts happens so there's one to

761
00:39:47,339 --> 00:39:49,079
make this is the situation why we need

762
00:39:49,079 --> 00:39:52,640
to make scheduling decisions

763
00:39:56,160 --> 00:39:58,280
um

764
00:39:59,220 --> 00:40:02,280
these are different category uh

765
00:40:02,280 --> 00:40:05,339
different different kind of machines

766
00:40:05,339 --> 00:40:07,320
okay the batch machines interactive

767
00:40:07,320 --> 00:40:09,359
machines and real-time machines

768
00:40:09,359 --> 00:40:11,880
so different system they usually have

769
00:40:11,880 --> 00:40:15,300
different scheduling goals Gathering

770
00:40:15,300 --> 00:40:19,500
goals so batch system batch systems um

771
00:40:19,500 --> 00:40:23,099
any students know what are batch systems

772
00:40:23,099 --> 00:40:25,380
so here batch interactive and real time

773
00:40:25,380 --> 00:40:26,700
real time

774
00:40:26,700 --> 00:40:28,560
they are

775
00:40:28,560 --> 00:40:30,560
um

776
00:40:30,960 --> 00:40:33,300
batch system interactive system realized

777
00:40:33,300 --> 00:40:36,300
systems all these three different kind

778
00:40:36,300 --> 00:40:39,420
of systems operating systems are widely

779
00:40:39,420 --> 00:40:44,000
used today why did you use it today

780
00:40:45,119 --> 00:40:47,640
so example of the batch system so you

781
00:40:47,640 --> 00:40:49,740
can think of that is that uh what do we

782
00:40:49,740 --> 00:40:52,520
have yeah yeah oh what's your name

783
00:40:52,520 --> 00:40:55,700
I tried

784
00:40:59,339 --> 00:41:01,619
definition of the batch system okay

785
00:41:01,619 --> 00:41:05,720
batch is a batch or what is the batch

786
00:41:07,460 --> 00:41:11,640
a lot of stuff okay uh yeah uh oh that's

787
00:41:11,640 --> 00:41:13,980
interesting okay what is the batch okay

788
00:41:13,980 --> 00:41:16,740
um I do stream processing system this is

789
00:41:16,740 --> 00:41:18,359
my uh that's in my research Direction

790
00:41:18,359 --> 00:41:21,960
okay uh what I do I actually I built uh

791
00:41:21,960 --> 00:41:24,180
several stream processing systems why is

792
00:41:24,180 --> 00:41:25,980
the batch stream processing systems when

793
00:41:25,980 --> 00:41:28,980
it's events stream processing systems so

794
00:41:28,980 --> 00:41:32,099
batch means that when you process

795
00:41:32,099 --> 00:41:36,060
when you process this the units you

796
00:41:36,060 --> 00:41:38,880
processing it batch of the batch of the

797
00:41:38,880 --> 00:41:41,940
batch so batch means the input inputs of

798
00:41:41,940 --> 00:41:44,520
the system inputs of the system think of

799
00:41:44,520 --> 00:41:48,960
that think of that I have I have

800
00:41:48,960 --> 00:41:53,220
a lot of data I have a lot of data

801
00:41:53,220 --> 00:41:55,619
think of the data is just the document

802
00:41:55,619 --> 00:41:58,440
documents I have a lot of documents I

803
00:41:58,440 --> 00:42:01,440
can process 100 documents at one time

804
00:42:01,440 --> 00:42:04,980
like I loaded them first I loaded 100 at

805
00:42:04,980 --> 00:42:06,540
one time and then processed them

806
00:42:06,540 --> 00:42:09,780
together this is batch then what is the

807
00:42:09,780 --> 00:42:12,780
what is the what is another non-batch

808
00:42:12,780 --> 00:42:14,820
like events we have the micro bashing

809
00:42:14,820 --> 00:42:16,560
event what kind of that means that

810
00:42:16,560 --> 00:42:19,079
whenever you have a new data like a new

811
00:42:19,079 --> 00:42:22,500
document a new event a new text comes in

812
00:42:22,500 --> 00:42:25,140
you immediately load it into the system

813
00:42:25,140 --> 00:42:28,200
and process it that is non-batch so

814
00:42:28,200 --> 00:42:29,099
batch

815
00:42:29,099 --> 00:42:32,640
means the import size is large okay so

816
00:42:32,640 --> 00:42:33,839
what are the example of the batch

817
00:42:33,839 --> 00:42:36,420
systems Battery Systems are in use in

818
00:42:36,420 --> 00:42:38,220
business in business in business

819
00:42:38,220 --> 00:42:40,140
especially in the bank in the bank

820
00:42:40,140 --> 00:42:42,420
because they need to do the payrolls

821
00:42:42,420 --> 00:42:45,060
inventory accounts receivable accounts

822
00:42:45,060 --> 00:42:48,119
payable interest calculation

823
00:42:48,119 --> 00:42:51,420
for a large amount of accounts

824
00:42:51,420 --> 00:42:53,220
um

825
00:42:53,220 --> 00:42:55,920
like Chase Chase Chase Bank the Chase

826
00:42:55,920 --> 00:42:59,700
Bank will not have just uh 100 accounts

827
00:42:59,700 --> 00:43:02,339
it will have 100 million accounts right

828
00:43:02,339 --> 00:43:04,560
they cannot process everyone's Accounts

829
00:43:04,560 --> 00:43:06,180
at time for example you make a

830
00:43:06,180 --> 00:43:07,319
transaction

831
00:43:07,319 --> 00:43:09,420
the bank they were frankly immediately

832
00:43:09,420 --> 00:43:11,579
refreshed to you but they are actually

833
00:43:11,579 --> 00:43:14,220
not just the work for you it's actually

834
00:43:14,220 --> 00:43:18,000
at one time one even one second a lot of

835
00:43:18,000 --> 00:43:19,619
requests to come to the bank and bank

836
00:43:19,619 --> 00:43:21,720
process them together that is a bench

837
00:43:21,720 --> 00:43:24,660
system okay an interactive system what

838
00:43:24,660 --> 00:43:28,140
are the example of interactive systems

839
00:43:28,140 --> 00:43:29,400
yes

840
00:43:29,400 --> 00:43:32,400
magician

841
00:43:39,420 --> 00:43:42,359
yes very good I need anything with the

842
00:43:42,359 --> 00:43:45,060
UI is interactive anything with the UI

843
00:43:45,060 --> 00:43:47,339
is interactive okay it's a real-time

844
00:43:47,339 --> 00:43:49,140
systems that

845
00:43:49,140 --> 00:43:53,760
um whenever we we whenever we enter what

846
00:43:53,760 --> 00:43:57,619
is the interactive if um

847
00:43:58,380 --> 00:44:01,440
so in another OS session they focus on

848
00:44:01,440 --> 00:44:04,859
the network or systems so they have

849
00:44:04,859 --> 00:44:06,960
server and clients right this seems more

850
00:44:06,960 --> 00:44:09,660
like an interactive whatever clients

851
00:44:09,660 --> 00:44:12,060
send the request is expecting a response

852
00:44:12,060 --> 00:44:15,240
that is the interactive okay the what is

853
00:44:15,240 --> 00:44:19,400
the real time what is the real time

854
00:44:27,000 --> 00:44:30,740
what is the real-time award or real time

855
00:44:30,740 --> 00:44:33,720
to me it's the same thing to Earth is

856
00:44:33,720 --> 00:44:35,460
like they are the same right interactive

857
00:44:35,460 --> 00:44:37,260
and real time they are they are the same

858
00:44:37,260 --> 00:44:39,480
right they're the same but they are

859
00:44:39,480 --> 00:44:42,020
actually not

860
00:44:44,099 --> 00:44:47,099
they're actually not so uh well here the

861
00:44:47,099 --> 00:44:49,200
interactive means that

862
00:44:49,200 --> 00:44:53,099
is needed a user to frequently

863
00:44:53,099 --> 00:44:55,440
frequently

864
00:44:55,440 --> 00:44:58,200
gather on interact with the system but

865
00:44:58,200 --> 00:45:00,920
real time real time is only it's usually

866
00:45:00,920 --> 00:45:05,280
associated with the debt deadline

867
00:45:05,280 --> 00:45:08,520
that nine definition always we also call

868
00:45:08,520 --> 00:45:11,819
it SLA server level agreement server

869
00:45:11,819 --> 00:45:15,560
level agreement SLA

870
00:45:16,020 --> 00:45:19,740
so there are many real-time systems

871
00:45:19,740 --> 00:45:22,440
you are embedded systems are mostly

872
00:45:22,440 --> 00:45:25,319
real-time systems embedded area of your

873
00:45:25,319 --> 00:45:27,300
embedded systems and many systems are

874
00:45:27,300 --> 00:45:28,980
both interactive and real-time

875
00:45:28,980 --> 00:45:32,420
interactive and real yes

876
00:45:32,480 --> 00:45:36,260
invent invented

877
00:45:37,560 --> 00:45:39,960
I don't know if I'm I'm pronounce it

878
00:45:39,960 --> 00:45:42,780
right in Bandit

879
00:45:42,780 --> 00:45:44,220
invented

880
00:45:44,220 --> 00:45:46,880
see some

881
00:45:47,460 --> 00:45:49,740
I watch

882
00:45:49,740 --> 00:45:51,780
for example your eye watch

883
00:45:51,780 --> 00:45:54,480
your your uh

884
00:45:54,480 --> 00:45:58,260
what your your GPS towards like a

885
00:45:58,260 --> 00:46:00,440
Tracker

886
00:46:00,440 --> 00:46:04,200
tracker the uh your activities your

887
00:46:04,200 --> 00:46:06,900
activities right your running activities

888
00:46:06,900 --> 00:46:10,260
these are all embedded system

889
00:46:10,260 --> 00:46:12,839
abundance system

890
00:46:12,839 --> 00:46:16,020
okay so let's go over to that

891
00:46:16,020 --> 00:46:18,000
okay let's look at the scattering

892
00:46:18,000 --> 00:46:21,060
algorithm score scattering almost all

893
00:46:21,060 --> 00:46:24,420
systems today focus on the fairies

894
00:46:24,420 --> 00:46:27,180
fairies give each process a fair share

895
00:46:27,180 --> 00:46:29,819
of the CPU fail means that's not means

896
00:46:29,819 --> 00:46:31,680
equally share

897
00:46:31,680 --> 00:46:34,980
okay guys here Fair film that's normal

898
00:46:34,980 --> 00:46:36,359
means equal

899
00:46:36,359 --> 00:46:39,060
it's not equal okay it's not equal not

900
00:46:39,060 --> 00:46:40,740
equal

901
00:46:40,740 --> 00:46:41,880
Fair

902
00:46:41,880 --> 00:46:44,780
means

903
00:46:49,680 --> 00:46:53,520
for example if I have a login process

904
00:46:53,520 --> 00:46:56,099
and I have an interactive process I may

905
00:46:56,099 --> 00:46:58,800
give 10 so for fair share it means like

906
00:46:58,800 --> 00:47:00,980
I have gave most of the time to the

907
00:47:00,980 --> 00:47:03,599
interactive process but if like the

908
00:47:03,599 --> 00:47:06,119
right the rest of time to the log

909
00:47:06,119 --> 00:47:08,880
process that is a fair sharing what is

910
00:47:08,880 --> 00:47:10,980
unfair sharing on Fair Share means that

911
00:47:10,980 --> 00:47:11,819
I

912
00:47:11,819 --> 00:47:14,640
I gave most of the time to a log logging

913
00:47:14,640 --> 00:47:17,300
process and give much less time to a

914
00:47:17,300 --> 00:47:20,700
integrative process so fair sharing does

915
00:47:20,700 --> 00:47:23,099
not mean a equally sharing is that not

916
00:47:23,099 --> 00:47:25,079
means five and five half and half no

917
00:47:25,079 --> 00:47:28,740
okay fashion means it's original sharing

918
00:47:28,740 --> 00:47:32,700
policy in first months seeing what state

919
00:47:32,700 --> 00:47:35,280
policies carrying out and balance okay

920
00:47:35,280 --> 00:47:37,560
load balance keep all parts of the

921
00:47:37,560 --> 00:47:40,260
system busy keep all parts of the system

922
00:47:40,260 --> 00:47:42,800
busy

923
00:47:51,480 --> 00:47:54,200
uh

924
00:47:55,920 --> 00:47:58,380
that's interesting about the load

925
00:47:58,380 --> 00:48:01,380
balance okay you you do um you use

926
00:48:01,380 --> 00:48:03,599
Amazon and anyone heard of Amazon ec2

927
00:48:03,599 --> 00:48:05,700
Amazon ec2

928
00:48:05,700 --> 00:48:08,760
no no one using it

929
00:48:08,760 --> 00:48:12,800
you use that right what is Amazon ec2

930
00:48:18,599 --> 00:48:23,460
yeah yeah I I you you guys you guys uh I

931
00:48:23,460 --> 00:48:25,140
recommend you strongly recommend you to

932
00:48:25,140 --> 00:48:27,119
try that because I remember

933
00:48:27,119 --> 00:48:29,099
um several years ago they gave every

934
00:48:29,099 --> 00:48:31,500
user a trial that you can test you can

935
00:48:31,500 --> 00:48:33,540
use a tiny you can get a free tiny

936
00:48:33,540 --> 00:48:36,599
virtual machines yeah

937
00:48:36,599 --> 00:48:38,339
AWS yeah

938
00:48:38,339 --> 00:48:43,500
AWS AWS Amazon ec2 iws AWS ec2

939
00:48:43,500 --> 00:48:47,339
yeah it's it is so

940
00:48:47,339 --> 00:48:49,980
so for the AWS easy tool is actually a

941
00:48:49,980 --> 00:48:51,900
data center right they have a data

942
00:48:51,900 --> 00:48:54,839
center they have the data center we have

943
00:48:54,839 --> 00:48:56,520
not known virtual machines but we will

944
00:48:56,520 --> 00:48:58,440
learn that in our later sections so what

945
00:48:58,440 --> 00:49:00,180
is the virtual machine they have a data

946
00:49:00,180 --> 00:49:01,800
center this data center have many

947
00:49:01,800 --> 00:49:05,040
physical machines physical merchants and

948
00:49:05,040 --> 00:49:06,660
inside the physical motions they create

949
00:49:06,660 --> 00:49:09,660
many virtual machines so give the give

950
00:49:09,660 --> 00:49:12,420
the use issues in illusion that they own

951
00:49:12,420 --> 00:49:14,280
each of the physical machine but they're

952
00:49:14,280 --> 00:49:16,980
actually not a physical machine can

953
00:49:16,980 --> 00:49:20,579
create so as many as like 100 virtual

954
00:49:20,579 --> 00:49:22,619
machines

955
00:49:22,619 --> 00:49:26,400
for now like a very good server

956
00:49:26,400 --> 00:49:29,460
and the you know the average CPU what is

957
00:49:29,460 --> 00:49:31,319
that one one

958
00:49:31,319 --> 00:49:34,619
I think this is interesting and you you

959
00:49:34,619 --> 00:49:37,819
guys need to know that

960
00:49:41,339 --> 00:49:44,579
Amazon hire a lot of software

961
00:49:44,579 --> 00:49:46,980
engineering every year every year right

962
00:49:46,980 --> 00:49:50,099
especially from our school I think uh

963
00:49:50,099 --> 00:49:53,579
like you you need to know that it's

964
00:49:53,579 --> 00:49:56,700
Amazon where how the Amazon are modeling

965
00:49:56,700 --> 00:49:59,940
the aaws is they are one of their group

966
00:49:59,940 --> 00:50:05,040
right Amazon AWS ec2 Amazon ec2 which is

967
00:50:05,040 --> 00:50:07,020
actually

968
00:50:07,020 --> 00:50:09,599
is is a data center right what they did

969
00:50:09,599 --> 00:50:12,180
is that they they have a data center

970
00:50:12,180 --> 00:50:14,819
thousands of machines into that the data

971
00:50:14,819 --> 00:50:16,140
center

972
00:50:16,140 --> 00:50:19,800
today doesn't have many zones

973
00:50:19,800 --> 00:50:20,940
right

974
00:50:20,940 --> 00:50:23,339
songs okay okay we might have not hover

975
00:50:23,339 --> 00:50:25,140
up that like let's say this is someone

976
00:50:25,140 --> 00:50:28,200
this is zone two but in each Zone in

977
00:50:28,200 --> 00:50:30,119
each Zone there's

978
00:50:30,119 --> 00:50:31,859
there's a data center let's say each

979
00:50:31,859 --> 00:50:35,480
Zone has only one Data Center

980
00:50:36,420 --> 00:50:38,579
in each data center it's you already

981
00:50:38,579 --> 00:50:40,319
have

982
00:50:40,319 --> 00:50:43,260
you can think of a data centers can be

983
00:50:43,260 --> 00:50:45,540
as large as uh

984
00:50:45,540 --> 00:50:48,540
the size of our classroom our classroom

985
00:50:48,540 --> 00:50:53,420
and there are a lot of racks there

986
00:50:53,780 --> 00:50:56,579
it's not like this it's not like this

987
00:50:56,579 --> 00:50:58,619
they do not have monitor they only have

988
00:50:58,619 --> 00:51:01,740
the server and the server is is not as

989
00:51:01,740 --> 00:51:04,980
as store as we are using it's not a

990
00:51:04,980 --> 00:51:07,680
stores we are using it's just a braid a

991
00:51:07,680 --> 00:51:11,339
braid as like a size of this height of

992
00:51:11,339 --> 00:51:14,839
this and they have a rack so each rack

993
00:51:14,839 --> 00:51:18,480
each rack have will have like 20 to 40

994
00:51:18,480 --> 00:51:20,940
servers

995
00:51:20,940 --> 00:51:24,680
servers so this is Amazon

996
00:51:31,980 --> 00:51:35,119
and in Amazon there's one importance

997
00:51:35,119 --> 00:51:37,079
departments called Resource Management

998
00:51:37,079 --> 00:51:41,040
Department I was I was I was entering at

999
00:51:41,040 --> 00:51:43,619
another company vmware's company's DLS

1000
00:51:43,619 --> 00:51:46,200
group DRS is doing Dynamic resources

1001
00:51:46,200 --> 00:51:48,000
scheduling group

1002
00:51:48,000 --> 00:51:49,740
um so I kind of know that

1003
00:51:49,740 --> 00:51:50,579
um

1004
00:51:50,579 --> 00:51:52,440
what do we do what do we do or what

1005
00:51:52,440 --> 00:51:54,180
Amazon do is that in in their

1006
00:51:54,180 --> 00:51:56,760
departments they do it's all resource

1007
00:51:56,760 --> 00:51:59,760
scheduling is resource Gathering and our

1008
00:51:59,760 --> 00:52:02,700
goal is to do what our goal is here wise

1009
00:52:02,700 --> 00:52:06,140
power saving

1010
00:52:06,960 --> 00:52:10,160
and load balance

1011
00:52:11,460 --> 00:52:13,559
so why we do what is the power saving

1012
00:52:13,559 --> 00:52:15,540
power saving means that I have let's say

1013
00:52:15,540 --> 00:52:17,760
I have this data center I have one

1014
00:52:17,760 --> 00:52:21,059
thousand one thousand servers one

1015
00:52:21,059 --> 00:52:23,819
thousand servers like in this racks 1000

1016
00:52:23,819 --> 00:52:26,359
servers

1017
00:52:27,660 --> 00:52:29,700
and this data center is in the

1018
00:52:29,700 --> 00:52:30,680
California

1019
00:52:30,680 --> 00:52:33,720
so it's in the California right we know

1020
00:52:33,720 --> 00:52:36,480
that most of time work at daytime they

1021
00:52:36,480 --> 00:52:38,099
are not going to work hard night time

1022
00:52:38,099 --> 00:52:41,099
your users you run the virtual machines

1023
00:52:41,099 --> 00:52:43,920
you are run then what do what what the

1024
00:52:43,920 --> 00:52:46,559
Amazon or the VMware going to do at

1025
00:52:46,559 --> 00:52:47,339
night

1026
00:52:47,339 --> 00:52:50,040
when no one is using their servers just

1027
00:52:50,040 --> 00:52:52,319
a few users are using their servers

1028
00:52:52,319 --> 00:52:54,059
where they are going to do they're going

1029
00:52:54,059 --> 00:52:57,660
to turn off turn off these servers

1030
00:52:57,660 --> 00:53:00,180
right white one of it because

1031
00:53:00,180 --> 00:53:02,940
we need to do Green Computing

1032
00:53:02,940 --> 00:53:06,780
save the money right it's it's a huge

1033
00:53:06,780 --> 00:53:09,240
huge amount of money because the server

1034
00:53:09,240 --> 00:53:11,520
they are very uh

1035
00:53:11,520 --> 00:53:13,680
power uh

1036
00:53:13,680 --> 00:53:16,020
a lot of they they cause a lot of

1037
00:53:16,020 --> 00:53:20,160
energies because a lot of Energies

1038
00:53:20,160 --> 00:53:22,680
if you are building a game PC you you

1039
00:53:22,680 --> 00:53:24,420
need to pay a lot in the electricity

1040
00:53:24,420 --> 00:53:26,880
bill because game PC they already have

1041
00:53:26,880 --> 00:53:29,300
100

1042
00:53:29,940 --> 00:53:34,079
Watts in the in the uh um Power in the

1043
00:53:34,079 --> 00:53:35,700
power okay

1044
00:53:35,700 --> 00:53:38,640
so that is uh one goal is to do a power

1045
00:53:38,640 --> 00:53:41,160
power saving another goal is to the load

1046
00:53:41,160 --> 00:53:42,839
balancing so what is the load balancing

1047
00:53:42,839 --> 00:53:45,599
load balancing means that

1048
00:53:45,599 --> 00:53:49,079
we do not want to have a server have a

1049
00:53:49,079 --> 00:53:51,359
like 19 percentage of the utilization

1050
00:53:51,359 --> 00:53:53,579
another server have only 20 percent of

1051
00:53:53,579 --> 00:53:57,059
the utilization that is not good that is

1052
00:53:57,059 --> 00:53:59,099
not good why it is not good we think of

1053
00:53:59,099 --> 00:54:01,740
that you have you have to CPU it runs

1054
00:54:01,740 --> 00:54:04,859
over 70 or 80 percentage you your server

1055
00:54:04,859 --> 00:54:09,119
comes comes very slow and easy to to get

1056
00:54:09,119 --> 00:54:11,880
failures the same as these data centers

1057
00:54:11,880 --> 00:54:15,000
they do not want their any of the server

1058
00:54:15,000 --> 00:54:18,180
got overloaded and what we did is that

1059
00:54:18,180 --> 00:54:20,520
we migrate the virtual machines from the

1060
00:54:20,520 --> 00:54:23,160
high loaded ones to the light loaded

1061
00:54:23,160 --> 00:54:25,859
ones and we Implement many algorithms

1062
00:54:25,859 --> 00:54:28,319
about that like in VMware they

1063
00:54:28,319 --> 00:54:31,020
implements uh

1064
00:54:31,020 --> 00:54:33,599
a lot of algorithms because we need to

1065
00:54:33,599 --> 00:54:36,000
take the inputs of users priority users

1066
00:54:36,000 --> 00:54:38,160
inputs and we need to take the impulse

1067
00:54:38,160 --> 00:54:40,319
of about the capacity under the

1068
00:54:40,319 --> 00:54:43,260
available resource of each servers and

1069
00:54:43,260 --> 00:54:45,660
the their

1070
00:54:45,660 --> 00:54:48,119
and we also need to consider in the

1071
00:54:48,119 --> 00:54:51,599
user's budgets right users badges so um

1072
00:54:51,599 --> 00:54:53,220
there's a lot of

1073
00:54:53,220 --> 00:54:57,540
a lot of uh policies here so well here I

1074
00:54:57,540 --> 00:54:59,280
talk a lot okay here are the takeaways

1075
00:54:59,280 --> 00:55:01,619
like is that you need to and you need to

1076
00:55:01,619 --> 00:55:04,440
understand in real world in real world

1077
00:55:04,440 --> 00:55:07,140
every system they have their own goals

1078
00:55:07,140 --> 00:55:08,280
they

1079
00:55:08,280 --> 00:55:12,059
have their own goals in our in this text

1080
00:55:12,059 --> 00:55:14,040
with textbooks mentioned that several

1081
00:55:14,040 --> 00:55:18,119
goals almost every system every systems

1082
00:55:18,119 --> 00:55:20,460
they focus on the fair list they focus

1083
00:55:20,460 --> 00:55:22,319
on policy enforcement policy

1084
00:55:22,319 --> 00:55:25,579
enforcements means that

1085
00:55:26,460 --> 00:55:29,400
if we have a policy we want to make it

1086
00:55:29,400 --> 00:55:32,819
we we need to ensure that it it'll work

1087
00:55:32,819 --> 00:55:35,640
we want to ensure it can work and

1088
00:55:35,640 --> 00:55:37,500
balanced load balance means keep all

1089
00:55:37,500 --> 00:55:39,960
parts of the system busy we do not want

1090
00:55:39,960 --> 00:55:42,140
to overload anyone we do not want to

1091
00:55:42,140 --> 00:55:45,359
like load everyone

1092
00:55:45,359 --> 00:55:47,940
and for the batch systems remember the

1093
00:55:47,940 --> 00:55:51,800
batch system right the bank system yes

1094
00:55:58,079 --> 00:56:01,200
policy policy enforcements means that I

1095
00:56:01,200 --> 00:56:03,300
design a policy

1096
00:56:03,300 --> 00:56:05,760
like for example I design a load balance

1097
00:56:05,760 --> 00:56:09,839
policy I want to ensure everyone is

1098
00:56:09,839 --> 00:56:13,680
everyone has the same exactly same

1099
00:56:13,680 --> 00:56:16,859
CPU utilization

1100
00:56:16,859 --> 00:56:19,680
policy enforcement means that

1101
00:56:19,680 --> 00:56:23,839
here these algorithms need to work

1102
00:56:24,119 --> 00:56:25,859
I will tell you which kind of policy

1103
00:56:25,859 --> 00:56:28,440
will not work for example I want every I

1104
00:56:28,440 --> 00:56:31,020
want every if you are opposed if you are

1105
00:56:31,020 --> 00:56:33,720
the servers I want everyone have exactly

1106
00:56:33,720 --> 00:56:36,720
50.9

1107
00:56:36,780 --> 00:56:39,780
CPU utilization at any moment it will

1108
00:56:39,780 --> 00:56:42,180
not work no one can guarantee that but

1109
00:56:42,180 --> 00:56:44,160
policy enforcement means that you design

1110
00:56:44,160 --> 00:56:46,440
policy you need to ensure

1111
00:56:46,440 --> 00:56:48,359
you satisfy that

1112
00:56:48,359 --> 00:56:49,740
okay

1113
00:56:49,740 --> 00:56:50,700
um

1114
00:56:50,700 --> 00:56:52,619
batch systems

1115
00:56:52,619 --> 00:56:55,079
batch systems like a bank system they

1116
00:56:55,079 --> 00:56:57,480
focus on the throughputs right and they

1117
00:56:57,480 --> 00:56:59,220
focus on turn around time what is the

1118
00:56:59,220 --> 00:57:01,380
terminal runtime what is the terminal

1119
00:57:01,380 --> 00:57:03,720
wrong time the time between the inputs

1120
00:57:03,720 --> 00:57:05,819
and between the outputs

1121
00:57:05,819 --> 00:57:07,980
you send the inputs to the systems you

1122
00:57:07,980 --> 00:57:09,780
get the output the time between the

1123
00:57:09,780 --> 00:57:11,760
inputs and the outputs is a turn around

1124
00:57:11,760 --> 00:57:16,700
hand so it's the true or

1125
00:57:16,740 --> 00:57:18,960
minimize the time between submission and

1126
00:57:18,960 --> 00:57:21,300
the termination so small turnaround time

1127
00:57:21,300 --> 00:57:24,980
means High supposedly true

1128
00:57:26,040 --> 00:57:28,260
small turn around time means High

1129
00:57:28,260 --> 00:57:30,740
throughput

1130
00:57:31,079 --> 00:57:33,000
small turnaround time means High

1131
00:57:33,000 --> 00:57:35,480
throughput

1132
00:57:36,780 --> 00:57:40,140
no wrong right we we talk about that no

1133
00:57:40,140 --> 00:57:42,480
okay and the CPU utilization bash system

1134
00:57:42,480 --> 00:57:45,180
keeps the CCU busy all the time okay and

1135
00:57:45,180 --> 00:57:46,800
for the interactive system we want to

1136
00:57:46,800 --> 00:57:48,420
ensure the response time what is the

1137
00:57:48,420 --> 00:57:50,760
response time the time between

1138
00:57:50,760 --> 00:57:53,339
the time which we we recently submit a

1139
00:57:53,339 --> 00:57:56,160
paper that we um we're building our

1140
00:57:56,160 --> 00:57:58,319
service engine for the age Computing

1141
00:57:58,319 --> 00:58:02,599
platforms and we reduce the QA time the

1142
00:58:02,599 --> 00:58:04,920
deployment's time the scheduling time

1143
00:58:04,920 --> 00:58:06,480
there are different times okay I tell

1144
00:58:06,480 --> 00:58:08,280
you what is the response time response

1145
00:58:08,280 --> 00:58:10,319
time means

1146
00:58:10,319 --> 00:58:12,660
means for example I go to the Amazon I

1147
00:58:12,660 --> 00:58:17,040
go to Amazon I choose a I choose I click

1148
00:58:17,040 --> 00:58:20,160
item I put into in it into the chat I

1149
00:58:20,160 --> 00:58:22,140
want to charge immediately refresh my

1150
00:58:22,140 --> 00:58:24,000
changes that's really spawn time like

1151
00:58:24,000 --> 00:58:26,900
the time I send the request and the time

1152
00:58:26,900 --> 00:58:30,839
the server responds to me the server may

1153
00:58:30,839 --> 00:58:34,640
not satisfy my yes

1154
00:58:36,299 --> 00:58:38,579
latencies turn around is the same as

1155
00:58:38,579 --> 00:58:41,160
lenses many times it is

1156
00:58:41,160 --> 00:58:43,559
many times it is well let's go to the

1157
00:58:43,559 --> 00:58:46,140
response time the response time means

1158
00:58:46,140 --> 00:58:50,099
the time the time that I got a server to

1159
00:58:50,099 --> 00:58:53,880
response response to me is reply to me

1160
00:58:53,880 --> 00:58:56,520
it does not mean that the server has

1161
00:58:56,520 --> 00:59:00,920
already finished my request

1162
00:59:01,140 --> 00:59:03,900
what kind of system have good response

1163
00:59:03,900 --> 00:59:07,440
time but it will not have a good uh

1164
00:59:07,440 --> 00:59:11,099
like uh processing time many systems

1165
00:59:11,099 --> 00:59:13,619
have good response time but not

1166
00:59:13,619 --> 00:59:16,140
not every system has good response time

1167
00:59:16,140 --> 00:59:18,780
there's sorry process time they are

1168
00:59:18,780 --> 00:59:21,839
different okay interactive in the for

1169
00:59:21,839 --> 00:59:23,540
other interactive

1170
00:59:23,540 --> 00:59:26,700
interactive systems they focus on the

1171
00:59:26,700 --> 00:59:30,960
response time because if you ask a

1172
00:59:30,960 --> 00:59:34,700
think of that you you you you you you

1173
00:59:35,579 --> 00:59:37,579
um

1174
00:59:38,520 --> 00:59:40,980
Amazon did quite a way of reduce the

1175
00:59:40,980 --> 00:59:42,660
response time single that you call the

1176
00:59:42,660 --> 00:59:45,299
agents representative right you have

1177
00:59:45,299 --> 00:59:47,280
something required you will immediately

1178
00:59:47,280 --> 00:59:49,020
answer the phone it will immediately

1179
00:59:49,020 --> 00:59:51,540
answer the phone okay that is that is

1180
00:59:51,540 --> 00:59:53,579
the response time so what is the process

1181
00:59:53,579 --> 00:59:55,859
time process time means

1182
00:59:55,859 --> 00:59:58,260
how long did your your problem got

1183
00:59:58,260 --> 01:00:01,799
resolved how long did your inputs got

1184
01:00:01,799 --> 01:00:03,960
processed that is process time

1185
01:00:03,960 --> 01:00:07,559
so most interactive systems like the

1186
01:00:07,559 --> 01:00:10,140
e-commerce systems they are really good

1187
01:00:10,140 --> 01:00:12,720
at response time because they there

1188
01:00:12,720 --> 01:00:15,119
there was a paper about that if the

1189
01:00:15,119 --> 01:00:18,420
response time is longer than I think

1190
01:00:18,420 --> 01:00:20,520
it's a limit then the company will lose

1191
01:00:20,520 --> 01:00:23,400
like billions of money because of that

1192
01:00:23,400 --> 01:00:26,460
because users are very tired if if I you

1193
01:00:26,460 --> 01:00:28,859
think of that you call agent you never

1194
01:00:28,859 --> 01:00:31,440
get a response how how angry you are

1195
01:00:31,440 --> 01:00:33,980
right

1196
01:00:34,440 --> 01:00:37,440
okay real-time system real-time systems

1197
01:00:37,440 --> 01:00:39,660
you need to meeting the deadlines okay

1198
01:00:39,660 --> 01:00:41,220
real that's the difference between the

1199
01:00:41,220 --> 01:00:43,619
real time and the Integrity okay

1200
01:00:43,619 --> 01:00:46,680
real-time systems focus more on the

1201
01:00:46,680 --> 01:00:50,280
process time they actually wants to

1202
01:00:50,280 --> 01:00:53,640
get the response quickly also get the

1203
01:00:53,640 --> 01:00:56,760
process time quickly meeting some data

1204
01:00:56,760 --> 01:00:58,619
and this data is the server level

1205
01:00:58,619 --> 01:01:01,440
response agreements server level

1206
01:01:01,440 --> 01:01:04,819
agreements okay

1207
01:01:04,819 --> 01:01:07,980
scheduling goals well the takeaway here

1208
01:01:07,980 --> 01:01:09,720
is that you need to understand almost

1209
01:01:09,720 --> 01:01:11,760
all the systems they focus on the

1210
01:01:11,760 --> 01:01:13,740
fairies and the low balance

1211
01:01:13,740 --> 01:01:16,140
focus on the fairness and the lower

1212
01:01:16,140 --> 01:01:18,960
balance and uh then different systems

1213
01:01:18,960 --> 01:01:21,599
they have different different priorities

1214
01:01:21,599 --> 01:01:23,760
for example system they focus on this

1215
01:01:23,760 --> 01:01:26,280
drupal's turnaround time interactive

1216
01:01:26,280 --> 01:01:28,380
system they focus on response and

1217
01:01:28,380 --> 01:01:30,780
real-time system they focus on meeting

1218
01:01:30,780 --> 01:01:34,200
the deadlines meeting the deadlines

1219
01:01:34,200 --> 01:01:36,660
now we are talking about just Gathering

1220
01:01:36,660 --> 01:01:39,359
uh in uh in these systems okay

1221
01:01:39,359 --> 01:01:41,579
scheduling these systems the OS

1222
01:01:41,579 --> 01:01:45,440
especially the OS is in a

1223
01:01:55,079 --> 01:01:59,059
uh give me one second

1224
01:02:19,020 --> 01:02:22,200
okay uh so we are going to learn several

1225
01:02:22,200 --> 01:02:24,180
different algorithms

1226
01:02:24,180 --> 01:02:25,160
um

1227
01:02:25,160 --> 01:02:27,960
it's not that difficult to understand

1228
01:02:27,960 --> 01:02:32,640
okay difficult on soundstand so uh so

1229
01:02:32,640 --> 01:02:36,140
firstly is that I've

1230
01:02:37,440 --> 01:02:40,380
yes I hope you guys can remember the

1231
01:02:40,380 --> 01:02:46,460
aberration of that fcfs fcfs because

1232
01:02:50,220 --> 01:02:54,839
so firstly is fcfs first come first

1233
01:02:54,839 --> 01:02:58,260
serve first to come first serve so first

1234
01:02:58,260 --> 01:03:00,420
to come first serve so what is the first

1235
01:03:00,420 --> 01:03:02,280
come first serve

1236
01:03:02,280 --> 01:03:03,119
um

1237
01:03:03,119 --> 01:03:06,359
we have the CPU queue right cpuq

1238
01:03:06,359 --> 01:03:09,680
let's use this slide

1239
01:03:12,420 --> 01:03:15,420
if we have several processes who who

1240
01:03:15,420 --> 01:03:17,940
joins the queue first be ready the state

1241
01:03:17,940 --> 01:03:22,160
first then we got a processed yes

1242
01:03:27,720 --> 01:03:30,480
uh what do you mean not exactly what

1243
01:03:30,480 --> 01:03:32,520
sounds like

1244
01:03:32,520 --> 01:03:37,339
yes it is exactly what it sounds like

1245
01:03:38,220 --> 01:03:41,460
it's very easy to implement

1246
01:03:41,460 --> 01:03:44,339
it's very easy to influence okay it will

1247
01:03:44,339 --> 01:03:47,339
not you don't want let's first look at

1248
01:03:47,339 --> 01:03:50,819
what is this okay oh sorry oh no

1249
01:03:50,819 --> 01:03:54,619
I do not have an example of that

1250
01:03:54,780 --> 01:03:58,819
oh God I don't have that

1251
01:04:00,720 --> 01:04:03,599
so easy is easy to implement why is it

1252
01:04:03,599 --> 01:04:05,520
easy to implement

1253
01:04:05,520 --> 01:04:08,099
you do not need to track

1254
01:04:08,099 --> 01:04:10,740
anything about their states you do not

1255
01:04:10,740 --> 01:04:12,059
need to track

1256
01:04:12,059 --> 01:04:14,579
like how many times they left how many

1257
01:04:14,579 --> 01:04:17,040
times CPU they have used

1258
01:04:17,040 --> 01:04:20,040
you just need to you just need to track

1259
01:04:20,040 --> 01:04:21,299
their

1260
01:04:21,299 --> 01:04:24,000
their calm their common orders right you

1261
01:04:24,000 --> 01:04:25,440
need just a little truck they are coming

1262
01:04:25,440 --> 01:04:28,859
orders so you can Implement that using a

1263
01:04:28,859 --> 01:04:33,500
ring you can Implement that using a

1264
01:04:33,740 --> 01:04:36,359
you can use either you start you do not

1265
01:04:36,359 --> 01:04:37,859
need to maintain any other information

1266
01:04:37,859 --> 01:04:41,240
so it's easy to implement

1267
01:04:41,240 --> 01:04:44,540
so the

1268
01:04:44,819 --> 01:04:47,280
the bad thing about that is unfair it's

1269
01:04:47,280 --> 01:04:50,059
very unfair it's called the staff Asian

1270
01:04:50,059 --> 01:04:54,059
it's starvations that is a

1271
01:04:54,059 --> 01:04:59,339
star uh v a t i o n

1272
01:04:59,339 --> 01:05:02,119
starvation

1273
01:05:02,880 --> 01:05:04,140
why

1274
01:05:04,140 --> 01:05:06,440
why

1275
01:05:09,000 --> 01:05:11,960
yeah Charlotte

1276
01:05:25,619 --> 01:05:27,559
and so you're getting through the jobs

1277
01:05:27,559 --> 01:05:30,540
and then halfway through

1278
01:05:30,540 --> 01:05:34,280
another process comes

1279
01:05:36,359 --> 01:05:38,339
the

1280
01:05:38,339 --> 01:05:41,640
and you keep getting processes that are

1281
01:05:41,640 --> 01:05:44,299
that are shorter than

1282
01:05:44,460 --> 01:05:47,720
the wall so the long but important

1283
01:05:52,380 --> 01:05:54,660
yeah yeah very good very good that's

1284
01:05:54,660 --> 01:05:58,200
that's exactly it means so we we have uh

1285
01:05:58,200 --> 01:06:00,480
single over the case we have a very long

1286
01:06:00,480 --> 01:06:03,140
job it's in front of

1287
01:06:03,140 --> 01:06:06,839
all these small jobs the small jobs are

1288
01:06:06,839 --> 01:06:08,640
blocked by the long job because the loan

1289
01:06:08,640 --> 01:06:10,920
jobs comes first so the CPU needs to

1290
01:06:10,920 --> 01:06:12,859
process the loan job first

1291
01:06:12,859 --> 01:06:15,359
however the case is that what if the

1292
01:06:15,359 --> 01:06:16,920
short jobs are really important they

1293
01:06:16,920 --> 01:06:19,500
have high priority but still if this is

1294
01:06:19,500 --> 01:06:20,700
the f

1295
01:06:20,700 --> 01:06:23,460
first to come first to serve then you

1296
01:06:23,460 --> 01:06:24,900
need to weigh that you need to weigh

1297
01:06:24,900 --> 01:06:27,480
that is it's the same thing like you

1298
01:06:27,480 --> 01:06:29,660
know

1299
01:06:30,780 --> 01:06:33,480
in in Amazon right you remember in the

1300
01:06:33,480 --> 01:06:35,520
Amazon like what

1301
01:06:35,520 --> 01:06:36,539
um

1302
01:06:36,539 --> 01:06:39,660
there's you only have two items but in

1303
01:06:39,660 --> 01:06:42,420
front of you there's a person who's have

1304
01:06:42,420 --> 01:06:45,599
hundreds of items in the chat but since

1305
01:06:45,599 --> 01:06:48,839
you are late you are behind of him

1306
01:06:48,839 --> 01:06:51,660
then you have to wait wait until his his

1307
01:06:51,660 --> 01:06:54,480
finished then it's your turn that is the

1308
01:06:54,480 --> 01:06:56,940
first come first serve this is it to

1309
01:06:56,940 --> 01:06:59,160
some extensive it's fair

1310
01:06:59,160 --> 01:07:01,619
then you realize how how they fix that

1311
01:07:01,619 --> 01:07:03,059
if you think of that how they fix that

1312
01:07:03,059 --> 01:07:05,420
in Amazon

1313
01:07:06,119 --> 01:07:08,700
they have a policy to do that

1314
01:07:08,700 --> 01:07:11,460
you remember that in

1315
01:07:11,460 --> 01:07:13,619
oh in California there's no Walmart

1316
01:07:13,619 --> 01:07:14,819
right

1317
01:07:14,819 --> 01:07:16,200
there is

1318
01:07:16,200 --> 01:07:17,880
there is right there is Walmart in

1319
01:07:17,880 --> 01:07:20,339
Walmart we we have the long line right

1320
01:07:20,339 --> 01:07:23,520
you you have to you have no you see the

1321
01:07:23,520 --> 01:07:26,160
there's many agents right but there's

1322
01:07:26,160 --> 01:07:28,859
one agent who is specially handling the

1323
01:07:28,859 --> 01:07:33,000
item less than 20. remember that that is

1324
01:07:33,000 --> 01:07:35,460
the way how how we how we

1325
01:07:35,460 --> 01:07:38,339
partially ensure the F first come first

1326
01:07:38,339 --> 01:07:40,740
serve but also gives some priority to

1327
01:07:40,740 --> 01:07:43,319
the short jobs that is the real life

1328
01:07:43,319 --> 01:07:46,319
real life fix okay but in here you need

1329
01:07:46,319 --> 01:07:49,319
to take away here or the disadvantage of

1330
01:07:49,319 --> 01:07:51,480
the first circumference Reserve okay now

1331
01:07:51,480 --> 01:07:53,640
let's take a look at Short is the job

1332
01:07:53,640 --> 01:07:57,680
first so what is the shortest job first

1333
01:07:58,079 --> 01:08:00,740
yes

1334
01:08:02,280 --> 01:08:06,500
yeah so what exactly it sounds like

1335
01:08:08,059 --> 01:08:11,400
you get the shortest job in the radical

1336
01:08:11,400 --> 01:08:14,339
goes first okay the shortest job in the

1337
01:08:14,339 --> 01:08:16,319
radical goes first when you have

1338
01:08:16,319 --> 01:08:19,560
multiple process then you find out who

1339
01:08:19,560 --> 01:08:22,140
is the shortest one and then you let it

1340
01:08:22,140 --> 01:08:25,859
go and after this finish you you look at

1341
01:08:25,859 --> 01:08:28,020
the others let's say I have a full

1342
01:08:28,020 --> 01:08:29,520
process

1343
01:08:29,520 --> 01:08:32,279
I see who who is the shortest I let him

1344
01:08:32,279 --> 01:08:34,738
go first then I go for the second one

1345
01:08:34,738 --> 01:08:37,319
who is shortest and then let him go to

1346
01:08:37,319 --> 01:08:41,339
first so you need to know here for sure

1347
01:08:41,339 --> 01:08:43,500
is the job first goes first you need to

1348
01:08:43,500 --> 01:08:46,799
know the runtime in advance you need to

1349
01:08:46,799 --> 01:08:48,839
know the runtime in advance that is the

1350
01:08:48,839 --> 01:08:50,819
disadvantage because many times you do

1351
01:08:50,819 --> 01:08:53,880
not know you only have an estimation you

1352
01:08:53,880 --> 01:08:56,219
only have an estimation about their time

1353
01:08:56,219 --> 01:08:59,100
based on the historical data in the real

1354
01:08:59,100 --> 01:09:01,920
life you do not know how they are but

1355
01:09:01,920 --> 01:09:04,020
that is the shortest job you need to

1356
01:09:04,020 --> 01:09:05,399
know that you need even you have the

1357
01:09:05,399 --> 01:09:06,839
estimation

1358
01:09:06,839 --> 01:09:08,339
um

1359
01:09:08,339 --> 01:09:11,399
it's a long preemptive algorithms what

1360
01:09:11,399 --> 01:09:15,258
is preemptive algorithms

1361
01:09:16,100 --> 01:09:19,080
what is preemptive algorithms what is

1362
01:09:19,080 --> 01:09:23,400
long preemptive algorithms preemptive

1363
01:09:27,238 --> 01:09:29,759
any students want to guess preemptive

1364
01:09:29,759 --> 01:09:32,640
and online preemptive

1365
01:09:32,640 --> 01:09:35,299
yeah sure

1366
01:09:36,359 --> 01:09:38,839
okay

1367
01:10:04,080 --> 01:10:05,640
so

1368
01:10:05,640 --> 01:10:09,199
yeah yeah okay

1369
01:10:21,060 --> 01:10:24,179
um so so let's first first take a look

1370
01:10:24,179 --> 01:10:26,219
at the targets of the preemptive and

1371
01:10:26,219 --> 01:10:30,800
algorithm alarm empty algorithms

1372
01:10:31,260 --> 01:10:34,860
so yes

1373
01:10:55,980 --> 01:10:58,800
Jersey is the that is the detailed

1374
01:10:58,800 --> 01:11:01,280
concept but let's go from the beginning

1375
01:11:01,280 --> 01:11:06,260
preemptive means pre yes

1376
01:11:09,659 --> 01:11:14,100
what is algorithms start to work to work

1377
01:11:14,100 --> 01:11:18,140
answer process of once something

1378
01:11:20,880 --> 01:11:23,640
very good interrupts whether you can

1379
01:11:23,640 --> 01:11:26,520
interrupt and change the order that is

1380
01:11:26,520 --> 01:11:28,580
preemptive and long preemptive

1381
01:11:28,580 --> 01:11:31,739
preemptive means that preemptive means

1382
01:11:31,739 --> 01:11:32,760
that

1383
01:11:32,760 --> 01:11:35,699
I run something I designed you go first

1384
01:11:35,699 --> 01:11:38,040
you go second you go search now you you

1385
01:11:38,040 --> 01:11:40,980
start running then you go first then I

1386
01:11:40,980 --> 01:11:42,600
found out that okay you're not good

1387
01:11:42,600 --> 01:11:45,540
you're not good so I immediately

1388
01:11:45,540 --> 01:11:48,840
put you back and ask him to go first

1389
01:11:48,840 --> 01:11:52,080
that is preemptive preemptive means I

1390
01:11:52,080 --> 01:11:54,780
can interrupt the processing order I can

1391
01:11:54,780 --> 01:11:57,120
interrupt it I can use the CPU who can

1392
01:11:57,120 --> 01:11:59,040
interrupt that the CPU can interrupt

1393
01:11:59,040 --> 01:12:01,320
that that is preemptive so long

1394
01:12:01,320 --> 01:12:03,600
preemptive means that no one can

1395
01:12:03,600 --> 01:12:06,239
interrupt whenever you decide the water

1396
01:12:06,239 --> 01:12:09,179
you need to follow that you need to

1397
01:12:09,179 --> 01:12:11,940
follow that that is long preemptive okay

1398
01:12:11,940 --> 01:12:14,400
so this is very important because this

1399
01:12:14,400 --> 01:12:15,840
is something we are going to learn in

1400
01:12:15,840 --> 01:12:19,159
our next chapter

1401
01:12:20,000 --> 01:12:23,820
we are going to refresh this okay we're

1402
01:12:23,820 --> 01:12:26,640
going to learn this again so preemptive

1403
01:12:26,640 --> 01:12:29,460
in the long preemptive

1404
01:12:29,460 --> 01:12:33,659
so the shortage this is this is not F or

1405
01:12:33,659 --> 01:12:37,380
FCS so FCS is is a pre mt4 or

1406
01:12:37,380 --> 01:12:40,159
non-preemitive

1407
01:12:40,440 --> 01:12:44,300
it's a preemptive or non-preemptive

1408
01:12:44,400 --> 01:12:46,800
yeah

1409
01:12:46,800 --> 01:12:49,219
it it

1410
01:12:49,500 --> 01:12:51,980
yes

1411
01:12:52,340 --> 01:12:54,780
very good when you are shopping at the

1412
01:12:54,780 --> 01:12:57,600
Walmart you shopping at the Walmart you

1413
01:12:57,600 --> 01:12:59,940
see the the the for example a lady in

1414
01:12:59,940 --> 01:13:02,940
front of you carries hundreds of items

1415
01:13:02,940 --> 01:13:05,219
then you find out she's very slow can

1416
01:13:05,219 --> 01:13:07,980
you interrupt her you say like stop let

1417
01:13:07,980 --> 01:13:10,560
me go for first you can you do that

1418
01:13:10,560 --> 01:13:13,320
you cannot it's it's illegal there's

1419
01:13:13,320 --> 01:13:15,659
alarm preemptive okay that's

1420
01:13:15,659 --> 01:13:17,640
non-preemitive okay

1421
01:13:17,640 --> 01:13:20,640
the fcfs okay that's long preemptive

1422
01:13:20,640 --> 01:13:22,679
okay okay

1423
01:13:22,679 --> 01:13:26,300
short is the job first

1424
01:13:27,960 --> 01:13:30,300
draw first

1425
01:13:30,300 --> 01:13:33,179
it's also long preemptive long

1426
01:13:33,179 --> 01:13:35,580
preemptive you give you have an

1427
01:13:35,580 --> 01:13:39,000
estimation about the runtime each

1428
01:13:39,000 --> 01:13:42,120
process runtime in advance you have the

1429
01:13:42,120 --> 01:13:45,179
estimation of their time and then run it

1430
01:13:45,179 --> 01:13:48,360
run it okay

1431
01:13:48,360 --> 01:13:49,860
so

1432
01:13:49,860 --> 01:13:52,260
let's calculating that okay I'll give it

1433
01:13:52,260 --> 01:13:54,239
to you to calculating it let's say we

1434
01:13:54,239 --> 01:13:57,600
have four jobs we have four jobs we have

1435
01:13:57,600 --> 01:14:02,820
four jobs they have the runtime as a b c

1436
01:14:02,820 --> 01:14:06,060
d okay they have a runtime of the ABC

1437
01:14:06,060 --> 01:14:07,620
team

1438
01:14:07,620 --> 01:14:10,980
and the a is more than b smaller than C

1439
01:14:10,980 --> 01:14:16,500
smaller than D okay this is P1 P2 P3 P4

1440
01:14:16,500 --> 01:14:20,940
they have a b c d okay a is more than b

1441
01:14:20,940 --> 01:14:23,040
is more than C is more than D okay what

1442
01:14:23,040 --> 01:14:25,560
is the processing order

1443
01:14:25,560 --> 01:14:28,679
of the shortest job first if they are

1444
01:14:28,679 --> 01:14:30,600
they are all in the radical water

1445
01:14:30,600 --> 01:14:32,640
processing order

1446
01:14:32,640 --> 01:14:34,640
um

1447
01:14:44,760 --> 01:14:46,920
yeah yeah a b c d okay what is the

1448
01:14:46,920 --> 01:14:49,020
turnaround time of that turn around time

1449
01:14:49,020 --> 01:14:51,659
to turn around the turnaround time is

1450
01:14:51,659 --> 01:14:52,380
the

1451
01:14:52,380 --> 01:14:55,140
the turnaround time is the time

1452
01:14:55,140 --> 01:14:56,940
sorry it's what is the average

1453
01:14:56,940 --> 01:14:59,280
turnaround time of this the total

1454
01:14:59,280 --> 01:15:02,580
runtime means that the moments the job

1455
01:15:02,580 --> 01:15:03,900
arrived

1456
01:15:03,900 --> 01:15:06,840
the time gap between the the jobs

1457
01:15:06,840 --> 01:15:09,780
arrives and then the job finishes right

1458
01:15:09,780 --> 01:15:12,000
the time Gap that is the time Gap the

1459
01:15:12,000 --> 01:15:15,000
differences okay how much what is the

1460
01:15:15,000 --> 01:15:19,520
average turnaround time of this oh

1461
01:15:19,800 --> 01:15:24,659
a plus b a plus b plus C plus d divided

1462
01:15:24,659 --> 01:15:27,659
four okay any students have other sort

1463
01:15:27,659 --> 01:15:30,719
what's this average turn around time of

1464
01:15:30,719 --> 01:15:33,360
this turn around time what the average

1465
01:15:33,360 --> 01:15:36,380
turn run time is

1466
01:15:43,460 --> 01:15:48,380
a plus a plus b

1467
01:15:48,420 --> 01:15:53,420
plus a plus b plus c

1468
01:15:53,699 --> 01:15:56,179
right

1469
01:15:56,580 --> 01:16:01,219
a plus b plus C plus d

1470
01:16:02,100 --> 01:16:06,840
okay any students since a is Right any

1471
01:16:06,840 --> 01:16:09,300
students in B is right

1472
01:16:09,300 --> 01:16:11,280
who votes for a

1473
01:16:11,280 --> 01:16:14,420
who votes for a

1474
01:16:16,440 --> 01:16:19,860
can you say it now who votes for a

1475
01:16:19,860 --> 01:16:22,320
Andrew you vote for a

1476
01:16:22,320 --> 01:16:24,739
you owe it for a so this is the average

1477
01:16:24,739 --> 01:16:29,179
turnaround time anyone votes for B

1478
01:16:30,300 --> 01:16:32,760
well then how about the other ones

1479
01:16:32,760 --> 01:16:35,900
you have other sort

1480
01:16:36,360 --> 01:16:38,100
you have other source

1481
01:16:38,100 --> 01:16:40,500
what's the average average we are

1482
01:16:40,500 --> 01:16:45,020
calculating average turn around time

1483
01:16:45,719 --> 01:16:49,080
run time right average turn around time

1484
01:16:49,080 --> 01:16:52,820
average return wrong time

1485
01:16:53,520 --> 01:16:56,179
yes

1486
01:16:58,159 --> 01:17:01,620
they are in the ready queue they are in

1487
01:17:01,620 --> 01:17:03,800
the

1488
01:17:04,080 --> 01:17:06,360
they are all in the radical

1489
01:17:06,360 --> 01:17:09,719
now we need to process them in some

1490
01:17:09,719 --> 01:17:12,000
certain water is sure this job first

1491
01:17:12,000 --> 01:17:14,640
order now we need to calculate in their

1492
01:17:14,640 --> 01:17:18,320
average turnaround time

1493
01:17:18,780 --> 01:17:20,520
we need to calculating their average

1494
01:17:20,520 --> 01:17:21,960
turn run time

1495
01:17:21,960 --> 01:17:24,480
so for the first job what is the

1496
01:17:24,480 --> 01:17:26,400
turnaround time for the first job let's

1497
01:17:26,400 --> 01:17:28,380
look at that for the first job

1498
01:17:28,380 --> 01:17:30,420
because the a needs to let's first

1499
01:17:30,420 --> 01:17:32,280
confirm that let's think like this first

1500
01:17:32,280 --> 01:17:34,380
if for the Georgia short is the job

1501
01:17:34,380 --> 01:17:36,600
first we need to processing them as a

1502
01:17:36,600 --> 01:17:39,659
and a b and a c and a d right

1503
01:17:39,659 --> 01:17:41,880
because a is smaller than b smaller than

1504
01:17:41,880 --> 01:17:43,800
C smaller than d right

1505
01:17:43,800 --> 01:17:46,380
so a go first right and then we wait

1506
01:17:46,380 --> 01:17:49,800
until B and then on TLC and then after

1507
01:17:49,800 --> 01:17:52,860
ABC all finish that we we go for d right

1508
01:17:52,860 --> 01:17:57,140
so what is the turnaround time for a

1509
01:17:57,659 --> 01:18:00,300
is a right it's a what is the turnaround

1510
01:18:00,300 --> 01:18:03,020
time for B

1511
01:18:03,780 --> 01:18:07,560
b or B is the arriving at the same time

1512
01:18:07,560 --> 01:18:09,719
as a right they are both they're all

1513
01:18:09,719 --> 01:18:12,300
four processing the radical what is the

1514
01:18:12,300 --> 01:18:15,260
turnaround time for B

1515
01:18:16,140 --> 01:18:18,540
a plus b is a plus b right because you

1516
01:18:18,540 --> 01:18:21,000
need to wait a to finish first a plus b

1517
01:18:21,000 --> 01:18:23,520
what is the turnaround height for C

1518
01:18:23,520 --> 01:18:25,679
the a plus b plus C right

1519
01:18:25,679 --> 01:18:28,020
turn around times for D is a plus b plus

1520
01:18:28,020 --> 01:18:31,199
C plus d right right right are we clear

1521
01:18:31,199 --> 01:18:33,420
and so the average time is

1522
01:18:33,420 --> 01:18:36,719
with this and then divide four right

1523
01:18:36,719 --> 01:18:38,699
that is the turnaround time average turn

1524
01:18:38,699 --> 01:18:39,719
run time

1525
01:18:39,719 --> 01:18:41,880
we are going to test that in the example

1526
01:18:41,880 --> 01:18:44,179
in your midterm okay

1527
01:18:44,179 --> 01:18:46,800
I might write that okay memorize that

1528
01:18:46,800 --> 01:18:49,100
okay

1529
01:18:53,940 --> 01:18:56,719
yeah Andrew

1530
01:18:58,580 --> 01:19:01,320
this is the turnaround time average time

1531
01:19:01,320 --> 01:19:03,800
around time

1532
01:19:05,580 --> 01:19:07,020
yeah very good that is the average

1533
01:19:07,020 --> 01:19:08,880
execution time yeah

1534
01:19:08,880 --> 01:19:10,860
yeah I'm asking ask question time then

1535
01:19:10,860 --> 01:19:13,140
that is the average execution time okay

1536
01:19:13,140 --> 01:19:15,960
so let's go to the shortest remaining

1537
01:19:15,960 --> 01:19:18,659
time first okay short is the remaining

1538
01:19:18,659 --> 01:19:21,199
time first

1539
01:19:22,100 --> 01:19:25,940
time first first it is a

1540
01:19:25,940 --> 01:19:29,040
preemptive algorithms it is a preemptive

1541
01:19:29,040 --> 01:19:31,440
algorithms okay it is a preemptive

1542
01:19:31,440 --> 01:19:32,880
algorithms

1543
01:19:32,880 --> 01:19:35,360
okay

1544
01:19:35,760 --> 01:19:39,060
so uh in in the case in the case in in

1545
01:19:39,060 --> 01:19:41,460
this case if we have

1546
01:19:41,460 --> 01:19:44,239
uh

1547
01:19:45,480 --> 01:19:48,659
so we pick the job we pick the job with

1548
01:19:48,659 --> 01:19:50,640
the shortest remaining time to excuse

1549
01:19:50,640 --> 01:19:54,300
the next okay we execute sign next so

1550
01:19:54,300 --> 01:19:56,400
Compare running time of the new job to

1551
01:19:56,400 --> 01:19:58,560
remaining job of the existing jobs also

1552
01:19:58,560 --> 01:20:00,420
or what exactly of the shortest

1553
01:20:00,420 --> 01:20:03,800
remaining time okay so here's the thing

1554
01:20:03,800 --> 01:20:07,440
steer the uh steal the Walmart example

1555
01:20:07,440 --> 01:20:09,000
okay

1556
01:20:09,000 --> 01:20:11,000
um

1557
01:20:13,320 --> 01:20:15,120
look at this they're the Walmart

1558
01:20:15,120 --> 01:20:17,640
examples maybe not good okay but let's

1559
01:20:17,640 --> 01:20:20,239
do this okay

1560
01:20:20,820 --> 01:20:23,159
here there's a lady it's a front of you

1561
01:20:23,159 --> 01:20:24,900
and the

1562
01:20:24,900 --> 01:20:27,179
she has a shopping cart so Russia has a

1563
01:20:27,179 --> 01:20:29,580
shopping cart there's a lot of items

1564
01:20:29,580 --> 01:20:32,640
a lot of items 100 items goes in you

1565
01:20:32,640 --> 01:20:36,600
only have two items okay now what is the

1566
01:20:36,600 --> 01:20:39,179
shortest time remaining time next means

1567
01:20:39,179 --> 01:20:41,040
that

1568
01:20:41,040 --> 01:20:45,060
she's in front of you if you if she's in

1569
01:20:45,060 --> 01:20:47,520
front of you okay and then after the

1570
01:20:47,520 --> 01:20:51,179
time at the time you you arrive

1571
01:20:51,179 --> 01:20:54,179
we check we check the system are going

1572
01:20:54,179 --> 01:20:57,239
to check how many items in her card

1573
01:20:57,239 --> 01:21:00,179
if this if there's

1574
01:21:00,179 --> 01:21:03,000
around more than two items more than two

1575
01:21:03,000 --> 01:21:05,400
items that means

1576
01:21:05,400 --> 01:21:09,140
she's slower than you she has the longer

1577
01:21:09,140 --> 01:21:14,699
remaining time than you so you jump in

1578
01:21:14,699 --> 01:21:16,980
front of her

1579
01:21:16,980 --> 01:21:21,120
but if if she only have one item by the

1580
01:21:21,120 --> 01:21:22,980
time you arriving by the time you

1581
01:21:22,980 --> 01:21:27,719
arriving she only have one items left

1582
01:21:27,719 --> 01:21:29,820
then she's still ahead of you because

1583
01:21:29,820 --> 01:21:32,280
she has the shortest remaining time

1584
01:21:32,280 --> 01:21:34,440
Okay so

1585
01:21:34,440 --> 01:21:36,840
so the idea why we need the shortest

1586
01:21:36,840 --> 01:21:38,520
remaining time

1587
01:21:38,520 --> 01:21:40,980
any students know why we need that why

1588
01:21:40,980 --> 01:21:43,020
we need that why why we design these

1589
01:21:43,020 --> 01:21:45,500
algorithms

1590
01:21:47,460 --> 01:21:50,040
you remember the the disadvantage of the

1591
01:21:50,040 --> 01:21:52,219
shortest time first

1592
01:21:52,219 --> 01:21:55,080
the remaining time of every process

1593
01:21:55,080 --> 01:21:58,940
changes because sometimes like

1594
01:21:59,040 --> 01:22:02,520
so basically if the remain time the

1595
01:22:02,520 --> 01:22:04,380
then yeah you're going to want to call

1596
01:22:04,380 --> 01:22:06,659
the one with the shortest remaining time

1597
01:22:06,659 --> 01:22:08,760
because that way you can get through all

1598
01:22:08,760 --> 01:22:09,900
the processes

1599
01:22:09,900 --> 01:22:12,300
yeah yeah whatever good so so the reason

1600
01:22:12,300 --> 01:22:14,940
is that you remember the disadvantage of

1601
01:22:14,940 --> 01:22:16,739
the shortest time first so you remember

1602
01:22:16,739 --> 01:22:18,840
that the disadvantages that you need to

1603
01:22:18,840 --> 01:22:21,540
you need to get everyone's running time

1604
01:22:21,540 --> 01:22:24,480
in advance the estimation by the most as

1605
01:22:24,480 --> 01:22:26,340
I told you most of times you cannot

1606
01:22:26,340 --> 01:22:29,040
estimate how much time they are actually

1607
01:22:29,040 --> 01:22:31,980
using you do not know how much time they

1608
01:22:31,980 --> 01:22:35,340
actually using many process they claim

1609
01:22:35,340 --> 01:22:37,440
they're owning these five minutes to

1610
01:22:37,440 --> 01:22:40,739
finish but actually they cost like 100

1611
01:22:40,739 --> 01:22:42,960
minutes you never know you never know

1612
01:22:42,960 --> 01:22:44,580
because they are waiting they are

1613
01:22:44,580 --> 01:22:46,080
waiting they have a lot of interrupts

1614
01:22:46,080 --> 01:22:47,699
they are waiting for Io they are waiting

1615
01:22:47,699 --> 01:22:50,760
for like the inputs right you you'll

1616
01:22:50,760 --> 01:22:52,620
never know so the system design a

1617
01:22:52,620 --> 01:22:55,140
shortage remaining time next so whatever

1618
01:22:55,140 --> 01:22:58,199
a new jobs comes in or they can also set

1619
01:22:58,199 --> 01:23:00,659
in a Time periodically time like every

1620
01:23:00,659 --> 01:23:03,120
five seconds they check they check how

1621
01:23:03,120 --> 01:23:05,699
much remaining time of of the current

1622
01:23:05,699 --> 01:23:08,760
job like the current job if if any of

1623
01:23:08,760 --> 01:23:10,980
them is it's not good it's not good then

1624
01:23:10,980 --> 01:23:13,980
it immediately preemptive like means

1625
01:23:13,980 --> 01:23:16,320
immediately get it back and put the new

1626
01:23:16,320 --> 01:23:19,739
process in the radio goes in okay so we

1627
01:23:19,739 --> 01:23:21,900
combine the running time for new job to

1628
01:23:21,900 --> 01:23:24,960
the remaining time of the existing job

1629
01:23:24,960 --> 01:23:27,000
combine the running time of new job

1630
01:23:27,000 --> 01:23:30,120
whenever new job comes in we compile it

1631
01:23:30,120 --> 01:23:32,340
to the remaining time of the existing

1632
01:23:32,340 --> 01:23:35,280
jobs and if existing job any of the

1633
01:23:35,280 --> 01:23:38,400
ecosystem job takes longer than the new

1634
01:23:38,400 --> 01:23:41,040
jobs then we

1635
01:23:41,040 --> 01:23:43,800
throw it back okay we get it back and

1636
01:23:43,800 --> 01:23:45,659
the last new jobs

1637
01:23:45,659 --> 01:23:49,020
join the queue sorry join the uh goes to

1638
01:23:49,020 --> 01:23:51,600
the running stage

1639
01:23:51,600 --> 01:23:54,780
that is the shortest remaining time next

1640
01:23:54,780 --> 01:23:58,640
actually shortest remain time next

1641
01:23:59,940 --> 01:24:02,100
okay another algorithms let's look at we

1642
01:24:02,100 --> 01:24:04,620
have learned we have learned a

1643
01:24:04,620 --> 01:24:07,020
we have learned the algorithm first so

1644
01:24:07,020 --> 01:24:09,600
this these are a very famous algorithms

1645
01:24:09,600 --> 01:24:11,760
in the batch system okay first come

1646
01:24:11,760 --> 01:24:13,560
first serve should his job shortage the

1647
01:24:13,560 --> 01:24:15,840
remaining time next now what are the

1648
01:24:15,840 --> 01:24:19,699
jobs what are other what other

1649
01:24:26,219 --> 01:24:27,960
the Gathering algorithm in the

1650
01:24:27,960 --> 01:24:31,560
interactive systems we have the wrong

1651
01:24:31,560 --> 01:24:34,140
Robin wrong robbing approach so what is

1652
01:24:34,140 --> 01:24:37,159
the wrong robbing approach

1653
01:24:37,199 --> 01:24:39,860
ES

1654
01:24:45,659 --> 01:24:47,460
um do you have a rotation basis rotation

1655
01:24:47,460 --> 01:24:50,060
very good

1656
01:24:51,179 --> 01:24:54,960
how to rotate between all the drops

1657
01:24:54,960 --> 01:24:57,239
each job have different times how you

1658
01:24:57,239 --> 01:25:00,480
rotate between these jobs

1659
01:25:00,480 --> 01:25:03,659
just to see from picture maker gas

1660
01:25:03,659 --> 01:25:06,060
some jobs are long some jobs are short

1661
01:25:06,060 --> 01:25:09,600
right how you going to rotate

1662
01:25:09,600 --> 01:25:11,820
I'm going to rotate

1663
01:25:11,820 --> 01:25:14,400
some jobs have three some jobs four

1664
01:25:14,400 --> 01:25:16,739
times four units some jobs need five

1665
01:25:16,739 --> 01:25:19,199
units some jobs need six units so how

1666
01:25:19,199 --> 01:25:22,040
are you going to rotate

1667
01:25:23,000 --> 01:25:25,980
Irene right Arie

1668
01:25:25,980 --> 01:25:28,260
you execute like B for a set amount of

1669
01:25:28,260 --> 01:25:28,920
time

1670
01:25:28,920 --> 01:25:30,960
a second then you yeah very good one

1671
01:25:30,960 --> 01:25:33,480
second so like one unit we settle units

1672
01:25:33,480 --> 01:25:36,659
we settle units and we we give the first

1673
01:25:36,659 --> 01:25:39,360
it's like a lock clock right a clock one

1674
01:25:39,360 --> 01:25:41,040
minute at one minute so we change your

1675
01:25:41,040 --> 01:25:42,960
job by minutes we change your job at 11

1676
01:25:42,960 --> 01:25:44,460
minutes we change your job this is a

1677
01:25:44,460 --> 01:25:47,159
wrong Robin we have a we have a slot we

1678
01:25:47,159 --> 01:25:49,820
have a um

1679
01:25:49,860 --> 01:25:52,380
we have a we call it the quantum we

1680
01:25:52,380 --> 01:25:53,940
thought this these words we call the

1681
01:25:53,940 --> 01:25:56,580
Cottons and so you need to set a good

1682
01:25:56,580 --> 01:25:59,520
Quantum if quantum is too short if two

1683
01:25:59,520 --> 01:26:02,100
column is too short we have a lot of uh

1684
01:26:02,100 --> 01:26:03,780
contact switches so we need to switch

1685
01:26:03,780 --> 01:26:06,060
between the process right if it is too

1686
01:26:06,060 --> 01:26:08,219
short we need a lot of contact switches

1687
01:26:08,219 --> 01:26:11,520
if it is too long if it's too long why

1688
01:26:11,520 --> 01:26:15,739
is it saying waste the CPU time why

1689
01:26:17,100 --> 01:26:19,739
if the quarter is too long why we say

1690
01:26:19,739 --> 01:26:23,000
it's called waste yes

1691
01:26:25,860 --> 01:26:27,920
yes yes

1692
01:26:27,920 --> 01:26:30,840
let's say I approach the quantum to be

1693
01:26:30,840 --> 01:26:34,199
one hour one hour and then the process

1694
01:26:34,199 --> 01:26:37,460
is just ah one of the processes just

1695
01:26:37,460 --> 01:26:41,639
needs six minutes to finish like it's a

1696
01:26:41,639 --> 01:26:44,340
60 and a six sixty and the six

1697
01:26:44,340 --> 01:26:46,739
minutes okay then I gave it a one hour

1698
01:26:46,739 --> 01:26:49,500
then it's the next quarter is only used

1699
01:26:49,500 --> 01:26:52,080
six minutes the other 54 units it's just

1700
01:26:52,080 --> 01:26:55,580
waiting okay

1701
01:27:02,400 --> 01:27:05,900
okay so um

1702
01:27:06,239 --> 01:27:09,360
now priority scheduling priority what is

1703
01:27:09,360 --> 01:27:12,060
priority scheduling so priority

1704
01:27:12,060 --> 01:27:13,920
scheduling is that we run the jobs

1705
01:27:13,920 --> 01:27:16,980
according to their priorities

1706
01:27:16,980 --> 01:27:17,940
um

1707
01:27:17,940 --> 01:27:21,540
it can be static and can do it

1708
01:27:21,540 --> 01:27:23,100
dynamically okay

1709
01:27:23,100 --> 01:27:24,540
um

1710
01:27:24,540 --> 01:27:27,360
so it can also combine with the wrong

1711
01:27:27,360 --> 01:27:29,580
Robin with priority let's look at this

1712
01:27:29,580 --> 01:27:32,520
we combined a priority with the round

1713
01:27:32,520 --> 01:27:35,520
robin so first we give the um high

1714
01:27:35,520 --> 01:27:38,100
priority ones as four and three and two

1715
01:27:38,100 --> 01:27:39,840
and one so what is the processing order

1716
01:27:39,840 --> 01:27:41,400
of this

1717
01:27:41,400 --> 01:27:44,719
we first we

1718
01:27:45,139 --> 01:27:48,000
any student know that what is priority

1719
01:27:48,000 --> 01:27:50,340
water

1720
01:27:50,340 --> 01:27:52,520
so we are going to give we're going to

1721
01:27:52,520 --> 01:27:56,100
process the high priority ones first but

1722
01:27:56,100 --> 01:27:58,440
when we providing high priority ones we

1723
01:27:58,440 --> 01:27:59,639
gave the

1724
01:27:59,639 --> 01:28:02,880
the same slot to this to this process

1725
01:28:02,880 --> 01:28:04,800
three process so we are going to switch

1726
01:28:04,800 --> 01:28:06,780
from this to this to this and then to

1727
01:28:06,780 --> 01:28:09,120
this to this to this until we finish all

1728
01:28:09,120 --> 01:28:10,679
these three then we go to the priorities

1729
01:28:10,679 --> 01:28:13,020
three and then we go straight that is a

1730
01:28:13,020 --> 01:28:15,420
combination okay so this is today's

1731
01:28:15,420 --> 01:28:18,300
class uh

1732
01:28:18,300 --> 01:28:21,659
uh yeah thank you so remember your

1733
01:28:21,659 --> 01:28:24,679
homework is due today

